# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ama', [dirname(__file__)])
        except ImportError:
            import _ama
            return _ama
        if fp is not None:
            try:
                _mod = imp.load_module('_ama', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ama = swig_import_helper()
    del swig_import_helper
else:
    import _ama
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class MarketType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarketType, name)
    __repr__ = _swig_repr
    kNone = _ama.MarketType_kNone
    kNEEQ = _ama.MarketType_kNEEQ
    kSHFE = _ama.MarketType_kSHFE
    kCFFEX = _ama.MarketType_kCFFEX
    kDCE = _ama.MarketType_kDCE
    kCZCE = _ama.MarketType_kCZCE
    kINE = _ama.MarketType_kINE
    kSSE = _ama.MarketType_kSSE
    kSZSE = _ama.MarketType_kSZSE
    kHKEx = _ama.MarketType_kHKEx
    kMax = _ama.MarketType_kMax
    def __init__(self): 
        this = _ama.new_MarketType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MarketType
    __del__ = lambda self : None;
MarketType_swigregister = _ama.MarketType_swigregister
MarketType_swigregister(MarketType)

class LogLevel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogLevel, name)
    __repr__ = _swig_repr
    kTrace = _ama.LogLevel_kTrace
    kDebug = _ama.LogLevel_kDebug
    kInfo = _ama.LogLevel_kInfo
    kWarn = _ama.LogLevel_kWarn
    kError = _ama.LogLevel_kError
    kFatal = _ama.LogLevel_kFatal
    def __init__(self): 
        this = _ama.new_LogLevel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_LogLevel
    __del__ = lambda self : None;
LogLevel_swigregister = _ama.LogLevel_swigregister
LogLevel_swigregister(LogLevel)

class ErrorCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorCode, name)
    __repr__ = _swig_repr
    kFailure = _ama.ErrorCode_kFailure
    kInited = _ama.ErrorCode_kInited
    kUnInited = _ama.ErrorCode_kUnInited
    kNullSpi = _ama.ErrorCode_kNullSpi
    kSuccess = _ama.ErrorCode_kSuccess
    def __init__(self): 
        this = _ama.new_ErrorCode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_ErrorCode
    __del__ = lambda self : None;
ErrorCode_swigregister = _ama.ErrorCode_swigregister
ErrorCode_swigregister(ErrorCode)

class ConstField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstField, name)
    __repr__ = _swig_repr
    kIPMaxLen = _ama.ConstField_kIPMaxLen
    kUsernameLen = _ama.ConstField_kUsernameLen
    kUMSItemLen = _ama.ConstField_kUMSItemLen
    kChannelExternCfgLen = _ama.ConstField_kChannelExternCfgLen
    kPasswordLen = _ama.ConstField_kPasswordLen
    kSecurityCodeLen = _ama.ConstField_kSecurityCodeLen
    kSecurityNameLen = _ama.ConstField_kSecurityNameLen
    kPositionLevelLen = _ama.ConstField_kPositionLevelLen
    kPathLen = _ama.ConstField_kPathLen
    kConfirmIdLen = _ama.ConstField_kConfirmIdLen
    kContactorLen = _ama.ConstField_kContactorLen
    kContactInfoLen = _ama.ConstField_kContactInfoLen
    kTradingPhaseCodeLen = _ama.ConstField_kTradingPhaseCodeLen
    kContractIDLen = _ama.ConstField_kContractIDLen
    kContractSymbolLen = _ama.ConstField_kContractSymbolLen
    kUnderlyingTypeLen = _ama.ConstField_kUnderlyingTypeLen
    kSecurityStatusFlagLen = _ama.ConstField_kSecurityStatusFlagLen
    kExChangeInstIDLen = _ama.ConstField_kExChangeInstIDLen
    kMaxMarketType = _ama.ConstField_kMaxMarketType
    kTradingStatusLen = _ama.ConstField_kTradingStatusLen
    kSecurityStatusLen = _ama.ConstField_kSecurityStatusLen
    kMDStreamIDMaxLen = _ama.ConstField_kMDStreamIDMaxLen
    def __init__(self): 
        this = _ama.new_ConstField()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_ConstField
    __del__ = lambda self : None;
ConstField_swigregister = _ama.ConstField_swigregister
ConstField_swigregister(ConstField)

class HighAvailableMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HighAvailableMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HighAvailableMode, name)
    __repr__ = _swig_repr
    kMasterSlaveA = _ama.HighAvailableMode_kMasterSlaveA
    kMasterSlaveB = _ama.HighAvailableMode_kMasterSlaveB
    kRegularDataFilter = _ama.HighAvailableMode_kRegularDataFilter
    def __init__(self): 
        this = _ama.new_HighAvailableMode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_HighAvailableMode
    __del__ = lambda self : None;
HighAvailableMode_swigregister = _ama.HighAvailableMode_swigregister
HighAvailableMode_swigregister(HighAvailableMode)

class ChannelMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelMode, name)
    __repr__ = _swig_repr
    kRDMA = _ama.ChannelMode_kRDMA
    kEXA = _ama.ChannelMode_kEXA
    kAMI = _ama.ChannelMode_kAMI
    kTCP = _ama.ChannelMode_kTCP
    kPCAP = _ama.ChannelMode_kPCAP
    def __init__(self): 
        this = _ama.new_ChannelMode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_ChannelMode
    __del__ = lambda self : None;
ChannelMode_swigregister = _ama.ChannelMode_swigregister
ChannelMode_swigregister(ChannelMode)

class SubscribeType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscribeType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubscribeType, name)
    __repr__ = _swig_repr
    kSet = _ama.SubscribeType_kSet
    kAdd = _ama.SubscribeType_kAdd
    kDel = _ama.SubscribeType_kDel
    kCancelAll = _ama.SubscribeType_kCancelAll
    def __init__(self): 
        this = _ama.new_SubscribeType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_SubscribeType
    __del__ = lambda self : None;
SubscribeType_swigregister = _ama.SubscribeType_swigregister
SubscribeType_swigregister(SubscribeType)

class SubscribeDataType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscribeDataType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubscribeDataType, name)
    __repr__ = _swig_repr
    kNone = _ama.SubscribeDataType_kNone
    kSnapshot = _ama.SubscribeDataType_kSnapshot
    kTickExecution = _ama.SubscribeDataType_kTickExecution
    kTickOrder = _ama.SubscribeDataType_kTickOrder
    kOrderQueue = _ama.SubscribeDataType_kOrderQueue
    kIndexSnapshot = _ama.SubscribeDataType_kIndexSnapshot
    kFutureSnapshot = _ama.SubscribeDataType_kFutureSnapshot
    kOptionSnapshot = _ama.SubscribeDataType_kOptionSnapshot
    kHKTSnapshot = _ama.SubscribeDataType_kHKTSnapshot
    kAfterHourFixedPriceSnapshot = _ama.SubscribeDataType_kAfterHourFixedPriceSnapshot
    kAfterHourFixedPriceTickExecution = _ama.SubscribeDataType_kAfterHourFixedPriceTickExecution
    kCSIIndexSnapshot = _ama.SubscribeDataType_kCSIIndexSnapshot
    kNEEQSnapshot = _ama.SubscribeDataType_kNEEQSnapshot
    def __init__(self): 
        this = _ama.new_SubscribeDataType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_SubscribeDataType
    __del__ = lambda self : None;
SubscribeDataType_swigregister = _ama.SubscribeDataType_swigregister
SubscribeDataType_swigregister(SubscribeDataType)

class EventLevel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventLevel, name)
    __repr__ = _swig_repr
    kInfo = _ama.EventLevel_kInfo
    kWarn = _ama.EventLevel_kWarn
    kError = _ama.EventLevel_kError
    def __init__(self): 
        this = _ama.new_EventLevel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_EventLevel
    __del__ = lambda self : None;
EventLevel_swigregister = _ama.EventLevel_swigregister
EventLevel_swigregister(EventLevel)

class EventCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventCode, name)
    __repr__ = _swig_repr
    kUMSConnectSuccess = _ama.EventCode_kUMSConnectSuccess
    kUMSConnectFailed = _ama.EventCode_kUMSConnectFailed
    kUMSLogonSuccess = _ama.EventCode_kUMSLogonSuccess
    kUMSLogonFailed = _ama.EventCode_kUMSLogonFailed
    kUMSHeartbeatTimeout = _ama.EventCode_kUMSHeartbeatTimeout
    kChannelRDMAInitSuccess = _ama.EventCode_kChannelRDMAInitSuccess
    kChannelRDMAInitFailed = _ama.EventCode_kChannelRDMAInitFailed
    kChannelEXAInitSuccess = _ama.EventCode_kChannelEXAInitSuccess
    kChannelEXAInitFailed = _ama.EventCode_kChannelEXAInitFailed
    kChannelPCAPInitSuccess = _ama.EventCode_kChannelPCAPInitSuccess
    kChannelPCAPInitFailed = _ama.EventCode_kChannelPCAPInitFailed
    kCTPDASStreamStart = _ama.EventCode_kCTPDASStreamStart
    kCTPDASStreamFinished = _ama.EventCode_kCTPDASStreamFinished
    kSzseBinaryDASStreamStart = _ama.EventCode_kSzseBinaryDASStreamStart
    kSzseBinaryDASStreamFinished = _ama.EventCode_kSzseBinaryDASStreamFinished
    kSseLDDSDASStreamStart = _ama.EventCode_kSseLDDSDASStreamStart
    kSseLDDSDASStreamFinished = _ama.EventCode_kSseLDDSDASStreamFinished
    kChannelAMIInitSuccess = _ama.EventCode_kChannelAMIInitSuccess
    kChannelAMIInitFailed = _ama.EventCode_kChannelAMIInitFailed
    kChannelTCPInitSuccess = _ama.EventCode_kChannelTCPInitSuccess
    kChannelTCPInitFailed = _ama.EventCode_kChannelTCPInitFailed
    kChannelTCPConnectSuccess = _ama.EventCode_kChannelTCPConnectSuccess
    kChannelTCPConnectFailed = _ama.EventCode_kChannelTCPConnectFailed
    kChannelTCPLogonSuccess = _ama.EventCode_kChannelTCPLogonSuccess
    kChannelTCPLogonFailed = _ama.EventCode_kChannelTCPLogonFailed
    kChannelTCPSessionClosed = _ama.EventCode_kChannelTCPSessionClosed
    kChannelTCPHeartbeatTimeout = _ama.EventCode_kChannelTCPHeartbeatTimeout
    kSourceMasterSlaveChanged = _ama.EventCode_kSourceMasterSlaveChanged
    def __init__(self): 
        this = _ama.new_EventCode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_EventCode
    __del__ = lambda self : None;
EventCode_swigregister = _ama.EventCode_swigregister
EventCode_swigregister(EventCode)

class UMSItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UMSItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UMSItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["local_ip"] = _ama.UMSItem_local_ip_set
    __swig_getmethods__["local_ip"] = _ama.UMSItem_local_ip_get
    if _newclass:local_ip = _swig_property(_ama.UMSItem_local_ip_get, _ama.UMSItem_local_ip_set)
    __swig_setmethods__["server_ip"] = _ama.UMSItem_server_ip_set
    __swig_getmethods__["server_ip"] = _ama.UMSItem_server_ip_get
    if _newclass:server_ip = _swig_property(_ama.UMSItem_server_ip_get, _ama.UMSItem_server_ip_set)
    __swig_setmethods__["server_port"] = _ama.UMSItem_server_port_set
    __swig_getmethods__["server_port"] = _ama.UMSItem_server_port_get
    if _newclass:server_port = _swig_property(_ama.UMSItem_server_port_get, _ama.UMSItem_server_port_set)
    def __init__(self): 
        this = _ama.new_UMSItem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_UMSItem
    __del__ = lambda self : None;
UMSItem_swigregister = _ama.UMSItem_swigregister
UMSItem_swigregister(UMSItem)

class ChannelExternCfg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelExternCfg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelExternCfg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["channel_mode"] = _ama.ChannelExternCfg_channel_mode_set
    __swig_getmethods__["channel_mode"] = _ama.ChannelExternCfg_channel_mode_get
    if _newclass:channel_mode = _swig_property(_ama.ChannelExternCfg_channel_mode_get, _ama.ChannelExternCfg_channel_mode_set)
    __swig_setmethods__["polling"] = _ama.ChannelExternCfg_polling_set
    __swig_getmethods__["polling"] = _ama.ChannelExternCfg_polling_get
    if _newclass:polling = _swig_property(_ama.ChannelExternCfg_polling_get, _ama.ChannelExternCfg_polling_set)
    __swig_setmethods__["queue_size"] = _ama.ChannelExternCfg_queue_size_set
    __swig_getmethods__["queue_size"] = _ama.ChannelExternCfg_queue_size_get
    if _newclass:queue_size = _swig_property(_ama.ChannelExternCfg_queue_size_get, _ama.ChannelExternCfg_queue_size_set)
    def __init__(self): 
        this = _ama.new_ChannelExternCfg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_ChannelExternCfg
    __del__ = lambda self : None;
ChannelExternCfg_swigregister = _ama.ChannelExternCfg_swigregister
ChannelExternCfg_swigregister(ChannelExternCfg)

class Cfg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cfg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cfg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["channel_mode"] = _ama.Cfg_channel_mode_set
    __swig_getmethods__["channel_mode"] = _ama.Cfg_channel_mode_get
    if _newclass:channel_mode = _swig_property(_ama.Cfg_channel_mode_get, _ama.Cfg_channel_mode_set)
    __swig_setmethods__["ha_mode"] = _ama.Cfg_ha_mode_set
    __swig_getmethods__["ha_mode"] = _ama.Cfg_ha_mode_get
    if _newclass:ha_mode = _swig_property(_ama.Cfg_ha_mode_get, _ama.Cfg_ha_mode_set)
    __swig_setmethods__["min_log_level"] = _ama.Cfg_min_log_level_set
    __swig_getmethods__["min_log_level"] = _ama.Cfg_min_log_level_get
    if _newclass:min_log_level = _swig_property(_ama.Cfg_min_log_level_get, _ama.Cfg_min_log_level_set)
    __swig_setmethods__["is_output_mon_data"] = _ama.Cfg_is_output_mon_data_set
    __swig_getmethods__["is_output_mon_data"] = _ama.Cfg_is_output_mon_data_get
    if _newclass:is_output_mon_data = _swig_property(_ama.Cfg_is_output_mon_data_get, _ama.Cfg_is_output_mon_data_set)
    __swig_setmethods__["is_thread_safe"] = _ama.Cfg_is_thread_safe_set
    __swig_getmethods__["is_thread_safe"] = _ama.Cfg_is_thread_safe_get
    if _newclass:is_thread_safe = _swig_property(_ama.Cfg_is_thread_safe_get, _ama.Cfg_is_thread_safe_set)
    __swig_setmethods__["keep_order"] = _ama.Cfg_keep_order_set
    __swig_getmethods__["keep_order"] = _ama.Cfg_keep_order_get
    if _newclass:keep_order = _swig_property(_ama.Cfg_keep_order_get, _ama.Cfg_keep_order_set)
    __swig_setmethods__["keep_order_timeout"] = _ama.Cfg_keep_order_timeout_set
    __swig_getmethods__["keep_order_timeout"] = _ama.Cfg_keep_order_timeout_get
    if _newclass:keep_order_timeout = _swig_property(_ama.Cfg_keep_order_timeout_get, _ama.Cfg_keep_order_timeout_set)
    __swig_setmethods__["is_subscribe_full"] = _ama.Cfg_is_subscribe_full_set
    __swig_getmethods__["is_subscribe_full"] = _ama.Cfg_is_subscribe_full_get
    if _newclass:is_subscribe_full = _swig_property(_ama.Cfg_is_subscribe_full_get, _ama.Cfg_is_subscribe_full_set)
    __swig_setmethods__["compress_mode"] = _ama.Cfg_compress_mode_set
    __swig_getmethods__["compress_mode"] = _ama.Cfg_compress_mode_get
    if _newclass:compress_mode = _swig_property(_ama.Cfg_compress_mode_get, _ama.Cfg_compress_mode_set)
    __swig_setmethods__["ums_servers"] = _ama.Cfg_ums_servers_set
    __swig_getmethods__["ums_servers"] = _ama.Cfg_ums_servers_get
    if _newclass:ums_servers = _swig_property(_ama.Cfg_ums_servers_get, _ama.Cfg_ums_servers_set)
    __swig_setmethods__["ums_server_cnt"] = _ama.Cfg_ums_server_cnt_set
    __swig_getmethods__["ums_server_cnt"] = _ama.Cfg_ums_server_cnt_get
    if _newclass:ums_server_cnt = _swig_property(_ama.Cfg_ums_server_cnt_get, _ama.Cfg_ums_server_cnt_set)
    __swig_setmethods__["username"] = _ama.Cfg_username_set
    __swig_getmethods__["username"] = _ama.Cfg_username_get
    if _newclass:username = _swig_property(_ama.Cfg_username_get, _ama.Cfg_username_set)
    __swig_setmethods__["password"] = _ama.Cfg_password_set
    __swig_getmethods__["password"] = _ama.Cfg_password_get
    if _newclass:password = _swig_property(_ama.Cfg_password_get, _ama.Cfg_password_set)
    __swig_setmethods__["polling"] = _ama.Cfg_polling_set
    __swig_getmethods__["polling"] = _ama.Cfg_polling_get
    if _newclass:polling = _swig_property(_ama.Cfg_polling_get, _ama.Cfg_polling_set)
    __swig_setmethods__["queue_size"] = _ama.Cfg_queue_size_set
    __swig_getmethods__["queue_size"] = _ama.Cfg_queue_size_get
    if _newclass:queue_size = _swig_property(_ama.Cfg_queue_size_get, _ama.Cfg_queue_size_set)
    __swig_setmethods__["channel_ex_cfg"] = _ama.Cfg_channel_ex_cfg_set
    __swig_getmethods__["channel_ex_cfg"] = _ama.Cfg_channel_ex_cfg_get
    if _newclass:channel_ex_cfg = _swig_property(_ama.Cfg_channel_ex_cfg_get, _ama.Cfg_channel_ex_cfg_set)
    __swig_setmethods__["ex_cfg_cnt"] = _ama.Cfg_ex_cfg_cnt_set
    __swig_getmethods__["ex_cfg_cnt"] = _ama.Cfg_ex_cfg_cnt_get
    if _newclass:ex_cfg_cnt = _swig_property(_ama.Cfg_ex_cfg_cnt_get, _ama.Cfg_ex_cfg_cnt_set)
    def __init__(self): 
        this = _ama.new_Cfg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_Cfg
    __del__ = lambda self : None;
Cfg_swigregister = _ama.Cfg_swigregister
Cfg_swigregister(Cfg)

class SubscribeItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscribeItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubscribeItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market"] = _ama.SubscribeItem_market_set
    __swig_getmethods__["market"] = _ama.SubscribeItem_market_get
    if _newclass:market = _swig_property(_ama.SubscribeItem_market_get, _ama.SubscribeItem_market_set)
    __swig_setmethods__["flag"] = _ama.SubscribeItem_flag_set
    __swig_getmethods__["flag"] = _ama.SubscribeItem_flag_get
    if _newclass:flag = _swig_property(_ama.SubscribeItem_flag_get, _ama.SubscribeItem_flag_set)
    __swig_setmethods__["security_code"] = _ama.SubscribeItem_security_code_set
    __swig_getmethods__["security_code"] = _ama.SubscribeItem_security_code_get
    if _newclass:security_code = _swig_property(_ama.SubscribeItem_security_code_get, _ama.SubscribeItem_security_code_set)
    def __init__(self): 
        this = _ama.new_SubscribeItem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_SubscribeItem
    __del__ = lambda self : None;
SubscribeItem_swigregister = _ama.SubscribeItem_swigregister
SubscribeItem_swigregister(SubscribeItem)

class MDSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDSnapshot_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDSnapshot_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDSnapshot_market_type_get, _ama.MDSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDSnapshot_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDSnapshot_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDSnapshot_security_code_get, _ama.MDSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = _ama.MDSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = _ama.MDSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(_ama.MDSnapshot_orig_time_get, _ama.MDSnapshot_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = _ama.MDSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = _ama.MDSnapshot_trading_phase_code_get
    if _newclass:trading_phase_code = _swig_property(_ama.MDSnapshot_trading_phase_code_get, _ama.MDSnapshot_trading_phase_code_set)
    __swig_setmethods__["pre_close_price"] = _ama.MDSnapshot_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = _ama.MDSnapshot_pre_close_price_get
    if _newclass:pre_close_price = _swig_property(_ama.MDSnapshot_pre_close_price_get, _ama.MDSnapshot_pre_close_price_set)
    __swig_setmethods__["open_price"] = _ama.MDSnapshot_open_price_set
    __swig_getmethods__["open_price"] = _ama.MDSnapshot_open_price_get
    if _newclass:open_price = _swig_property(_ama.MDSnapshot_open_price_get, _ama.MDSnapshot_open_price_set)
    __swig_setmethods__["high_price"] = _ama.MDSnapshot_high_price_set
    __swig_getmethods__["high_price"] = _ama.MDSnapshot_high_price_get
    if _newclass:high_price = _swig_property(_ama.MDSnapshot_high_price_get, _ama.MDSnapshot_high_price_set)
    __swig_setmethods__["low_price"] = _ama.MDSnapshot_low_price_set
    __swig_getmethods__["low_price"] = _ama.MDSnapshot_low_price_get
    if _newclass:low_price = _swig_property(_ama.MDSnapshot_low_price_get, _ama.MDSnapshot_low_price_set)
    __swig_setmethods__["last_price"] = _ama.MDSnapshot_last_price_set
    __swig_getmethods__["last_price"] = _ama.MDSnapshot_last_price_get
    if _newclass:last_price = _swig_property(_ama.MDSnapshot_last_price_get, _ama.MDSnapshot_last_price_set)
    __swig_setmethods__["close_price"] = _ama.MDSnapshot_close_price_set
    __swig_getmethods__["close_price"] = _ama.MDSnapshot_close_price_get
    if _newclass:close_price = _swig_property(_ama.MDSnapshot_close_price_get, _ama.MDSnapshot_close_price_set)
    __swig_setmethods__["bid_price"] = _ama.MDSnapshot_bid_price_set
    __swig_getmethods__["bid_price"] = _ama.MDSnapshot_bid_price_get
    if _newclass:bid_price = _swig_property(_ama.MDSnapshot_bid_price_get, _ama.MDSnapshot_bid_price_set)
    __swig_setmethods__["bid_volume"] = _ama.MDSnapshot_bid_volume_set
    __swig_getmethods__["bid_volume"] = _ama.MDSnapshot_bid_volume_get
    if _newclass:bid_volume = _swig_property(_ama.MDSnapshot_bid_volume_get, _ama.MDSnapshot_bid_volume_set)
    __swig_setmethods__["offer_price"] = _ama.MDSnapshot_offer_price_set
    __swig_getmethods__["offer_price"] = _ama.MDSnapshot_offer_price_get
    if _newclass:offer_price = _swig_property(_ama.MDSnapshot_offer_price_get, _ama.MDSnapshot_offer_price_set)
    __swig_setmethods__["offer_volume"] = _ama.MDSnapshot_offer_volume_set
    __swig_getmethods__["offer_volume"] = _ama.MDSnapshot_offer_volume_get
    if _newclass:offer_volume = _swig_property(_ama.MDSnapshot_offer_volume_get, _ama.MDSnapshot_offer_volume_set)
    __swig_setmethods__["num_trades"] = _ama.MDSnapshot_num_trades_set
    __swig_getmethods__["num_trades"] = _ama.MDSnapshot_num_trades_get
    if _newclass:num_trades = _swig_property(_ama.MDSnapshot_num_trades_get, _ama.MDSnapshot_num_trades_set)
    __swig_setmethods__["total_volume_trade"] = _ama.MDSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = _ama.MDSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(_ama.MDSnapshot_total_volume_trade_get, _ama.MDSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = _ama.MDSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = _ama.MDSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(_ama.MDSnapshot_total_value_trade_get, _ama.MDSnapshot_total_value_trade_set)
    __swig_setmethods__["total_bid_volume"] = _ama.MDSnapshot_total_bid_volume_set
    __swig_getmethods__["total_bid_volume"] = _ama.MDSnapshot_total_bid_volume_get
    if _newclass:total_bid_volume = _swig_property(_ama.MDSnapshot_total_bid_volume_get, _ama.MDSnapshot_total_bid_volume_set)
    __swig_setmethods__["total_offer_volume"] = _ama.MDSnapshot_total_offer_volume_set
    __swig_getmethods__["total_offer_volume"] = _ama.MDSnapshot_total_offer_volume_get
    if _newclass:total_offer_volume = _swig_property(_ama.MDSnapshot_total_offer_volume_get, _ama.MDSnapshot_total_offer_volume_set)
    __swig_setmethods__["weighted_avg_bid_price"] = _ama.MDSnapshot_weighted_avg_bid_price_set
    __swig_getmethods__["weighted_avg_bid_price"] = _ama.MDSnapshot_weighted_avg_bid_price_get
    if _newclass:weighted_avg_bid_price = _swig_property(_ama.MDSnapshot_weighted_avg_bid_price_get, _ama.MDSnapshot_weighted_avg_bid_price_set)
    __swig_setmethods__["weighted_avg_offer_price"] = _ama.MDSnapshot_weighted_avg_offer_price_set
    __swig_getmethods__["weighted_avg_offer_price"] = _ama.MDSnapshot_weighted_avg_offer_price_get
    if _newclass:weighted_avg_offer_price = _swig_property(_ama.MDSnapshot_weighted_avg_offer_price_get, _ama.MDSnapshot_weighted_avg_offer_price_set)
    __swig_setmethods__["IOPV"] = _ama.MDSnapshot_IOPV_set
    __swig_getmethods__["IOPV"] = _ama.MDSnapshot_IOPV_get
    if _newclass:IOPV = _swig_property(_ama.MDSnapshot_IOPV_get, _ama.MDSnapshot_IOPV_set)
    __swig_setmethods__["yield_to_maturity"] = _ama.MDSnapshot_yield_to_maturity_set
    __swig_getmethods__["yield_to_maturity"] = _ama.MDSnapshot_yield_to_maturity_get
    if _newclass:yield_to_maturity = _swig_property(_ama.MDSnapshot_yield_to_maturity_get, _ama.MDSnapshot_yield_to_maturity_set)
    __swig_setmethods__["high_limited"] = _ama.MDSnapshot_high_limited_set
    __swig_getmethods__["high_limited"] = _ama.MDSnapshot_high_limited_get
    if _newclass:high_limited = _swig_property(_ama.MDSnapshot_high_limited_get, _ama.MDSnapshot_high_limited_set)
    __swig_setmethods__["low_limited"] = _ama.MDSnapshot_low_limited_set
    __swig_getmethods__["low_limited"] = _ama.MDSnapshot_low_limited_get
    if _newclass:low_limited = _swig_property(_ama.MDSnapshot_low_limited_get, _ama.MDSnapshot_low_limited_set)
    __swig_setmethods__["price_earning_ratio1"] = _ama.MDSnapshot_price_earning_ratio1_set
    __swig_getmethods__["price_earning_ratio1"] = _ama.MDSnapshot_price_earning_ratio1_get
    if _newclass:price_earning_ratio1 = _swig_property(_ama.MDSnapshot_price_earning_ratio1_get, _ama.MDSnapshot_price_earning_ratio1_set)
    __swig_setmethods__["price_earning_ratio2"] = _ama.MDSnapshot_price_earning_ratio2_set
    __swig_getmethods__["price_earning_ratio2"] = _ama.MDSnapshot_price_earning_ratio2_get
    if _newclass:price_earning_ratio2 = _swig_property(_ama.MDSnapshot_price_earning_ratio2_get, _ama.MDSnapshot_price_earning_ratio2_set)
    __swig_setmethods__["change1"] = _ama.MDSnapshot_change1_set
    __swig_getmethods__["change1"] = _ama.MDSnapshot_change1_get
    if _newclass:change1 = _swig_property(_ama.MDSnapshot_change1_get, _ama.MDSnapshot_change1_set)
    __swig_setmethods__["change2"] = _ama.MDSnapshot_change2_set
    __swig_getmethods__["change2"] = _ama.MDSnapshot_change2_get
    if _newclass:change2 = _swig_property(_ama.MDSnapshot_change2_get, _ama.MDSnapshot_change2_set)
    __swig_setmethods__["channel_no"] = _ama.MDSnapshot_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDSnapshot_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDSnapshot_channel_no_get, _ama.MDSnapshot_channel_no_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDSnapshot_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDSnapshot_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDSnapshot_md_stream_id_get, _ama.MDSnapshot_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDSnapshot
    __del__ = lambda self : None;
MDSnapshot_swigregister = _ama.MDSnapshot_swigregister
MDSnapshot_swigregister(MDSnapshot)

class MDIndexSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDIndexSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDIndexSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDIndexSnapshot_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDIndexSnapshot_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDIndexSnapshot_market_type_get, _ama.MDIndexSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDIndexSnapshot_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDIndexSnapshot_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDIndexSnapshot_security_code_get, _ama.MDIndexSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = _ama.MDIndexSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = _ama.MDIndexSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(_ama.MDIndexSnapshot_orig_time_get, _ama.MDIndexSnapshot_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = _ama.MDIndexSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = _ama.MDIndexSnapshot_trading_phase_code_get
    if _newclass:trading_phase_code = _swig_property(_ama.MDIndexSnapshot_trading_phase_code_get, _ama.MDIndexSnapshot_trading_phase_code_set)
    __swig_setmethods__["pre_close_index"] = _ama.MDIndexSnapshot_pre_close_index_set
    __swig_getmethods__["pre_close_index"] = _ama.MDIndexSnapshot_pre_close_index_get
    if _newclass:pre_close_index = _swig_property(_ama.MDIndexSnapshot_pre_close_index_get, _ama.MDIndexSnapshot_pre_close_index_set)
    __swig_setmethods__["open_index"] = _ama.MDIndexSnapshot_open_index_set
    __swig_getmethods__["open_index"] = _ama.MDIndexSnapshot_open_index_get
    if _newclass:open_index = _swig_property(_ama.MDIndexSnapshot_open_index_get, _ama.MDIndexSnapshot_open_index_set)
    __swig_setmethods__["high_index"] = _ama.MDIndexSnapshot_high_index_set
    __swig_getmethods__["high_index"] = _ama.MDIndexSnapshot_high_index_get
    if _newclass:high_index = _swig_property(_ama.MDIndexSnapshot_high_index_get, _ama.MDIndexSnapshot_high_index_set)
    __swig_setmethods__["low_index"] = _ama.MDIndexSnapshot_low_index_set
    __swig_getmethods__["low_index"] = _ama.MDIndexSnapshot_low_index_get
    if _newclass:low_index = _swig_property(_ama.MDIndexSnapshot_low_index_get, _ama.MDIndexSnapshot_low_index_set)
    __swig_setmethods__["last_index"] = _ama.MDIndexSnapshot_last_index_set
    __swig_getmethods__["last_index"] = _ama.MDIndexSnapshot_last_index_get
    if _newclass:last_index = _swig_property(_ama.MDIndexSnapshot_last_index_get, _ama.MDIndexSnapshot_last_index_set)
    __swig_setmethods__["close_index"] = _ama.MDIndexSnapshot_close_index_set
    __swig_getmethods__["close_index"] = _ama.MDIndexSnapshot_close_index_get
    if _newclass:close_index = _swig_property(_ama.MDIndexSnapshot_close_index_get, _ama.MDIndexSnapshot_close_index_set)
    __swig_setmethods__["total_volume_trade"] = _ama.MDIndexSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = _ama.MDIndexSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(_ama.MDIndexSnapshot_total_volume_trade_get, _ama.MDIndexSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = _ama.MDIndexSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = _ama.MDIndexSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(_ama.MDIndexSnapshot_total_value_trade_get, _ama.MDIndexSnapshot_total_value_trade_set)
    __swig_setmethods__["channel_no"] = _ama.MDIndexSnapshot_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDIndexSnapshot_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDIndexSnapshot_channel_no_get, _ama.MDIndexSnapshot_channel_no_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDIndexSnapshot_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDIndexSnapshot_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDIndexSnapshot_md_stream_id_get, _ama.MDIndexSnapshot_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDIndexSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDIndexSnapshot
    __del__ = lambda self : None;
MDIndexSnapshot_swigregister = _ama.MDIndexSnapshot_swigregister
MDIndexSnapshot_swigregister(MDIndexSnapshot)

class MDTickOrder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDTickOrder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDTickOrder, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDTickOrder_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDTickOrder_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDTickOrder_market_type_get, _ama.MDTickOrder_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDTickOrder_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDTickOrder_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDTickOrder_security_code_get, _ama.MDTickOrder_security_code_set)
    __swig_setmethods__["channel_no"] = _ama.MDTickOrder_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDTickOrder_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDTickOrder_channel_no_get, _ama.MDTickOrder_channel_no_set)
    __swig_setmethods__["appl_seq_num"] = _ama.MDTickOrder_appl_seq_num_set
    __swig_getmethods__["appl_seq_num"] = _ama.MDTickOrder_appl_seq_num_get
    if _newclass:appl_seq_num = _swig_property(_ama.MDTickOrder_appl_seq_num_get, _ama.MDTickOrder_appl_seq_num_set)
    __swig_setmethods__["order_time"] = _ama.MDTickOrder_order_time_set
    __swig_getmethods__["order_time"] = _ama.MDTickOrder_order_time_get
    if _newclass:order_time = _swig_property(_ama.MDTickOrder_order_time_get, _ama.MDTickOrder_order_time_set)
    __swig_setmethods__["order_price"] = _ama.MDTickOrder_order_price_set
    __swig_getmethods__["order_price"] = _ama.MDTickOrder_order_price_get
    if _newclass:order_price = _swig_property(_ama.MDTickOrder_order_price_get, _ama.MDTickOrder_order_price_set)
    __swig_setmethods__["order_volume"] = _ama.MDTickOrder_order_volume_set
    __swig_getmethods__["order_volume"] = _ama.MDTickOrder_order_volume_get
    if _newclass:order_volume = _swig_property(_ama.MDTickOrder_order_volume_get, _ama.MDTickOrder_order_volume_set)
    __swig_setmethods__["side"] = _ama.MDTickOrder_side_set
    __swig_getmethods__["side"] = _ama.MDTickOrder_side_get
    if _newclass:side = _swig_property(_ama.MDTickOrder_side_get, _ama.MDTickOrder_side_set)
    __swig_setmethods__["order_type"] = _ama.MDTickOrder_order_type_set
    __swig_getmethods__["order_type"] = _ama.MDTickOrder_order_type_get
    if _newclass:order_type = _swig_property(_ama.MDTickOrder_order_type_get, _ama.MDTickOrder_order_type_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDTickOrder_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDTickOrder_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDTickOrder_md_stream_id_get, _ama.MDTickOrder_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDTickOrder()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDTickOrder
    __del__ = lambda self : None;
MDTickOrder_swigregister = _ama.MDTickOrder_swigregister
MDTickOrder_swigregister(MDTickOrder)

class MDTickExecution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDTickExecution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDTickExecution, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDTickExecution_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDTickExecution_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDTickExecution_market_type_get, _ama.MDTickExecution_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDTickExecution_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDTickExecution_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDTickExecution_security_code_get, _ama.MDTickExecution_security_code_set)
    __swig_setmethods__["exec_time"] = _ama.MDTickExecution_exec_time_set
    __swig_getmethods__["exec_time"] = _ama.MDTickExecution_exec_time_get
    if _newclass:exec_time = _swig_property(_ama.MDTickExecution_exec_time_get, _ama.MDTickExecution_exec_time_set)
    __swig_setmethods__["channel_no"] = _ama.MDTickExecution_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDTickExecution_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDTickExecution_channel_no_get, _ama.MDTickExecution_channel_no_set)
    __swig_setmethods__["appl_seq_num"] = _ama.MDTickExecution_appl_seq_num_set
    __swig_getmethods__["appl_seq_num"] = _ama.MDTickExecution_appl_seq_num_get
    if _newclass:appl_seq_num = _swig_property(_ama.MDTickExecution_appl_seq_num_get, _ama.MDTickExecution_appl_seq_num_set)
    __swig_setmethods__["exec_price"] = _ama.MDTickExecution_exec_price_set
    __swig_getmethods__["exec_price"] = _ama.MDTickExecution_exec_price_get
    if _newclass:exec_price = _swig_property(_ama.MDTickExecution_exec_price_get, _ama.MDTickExecution_exec_price_set)
    __swig_setmethods__["exec_volume"] = _ama.MDTickExecution_exec_volume_set
    __swig_getmethods__["exec_volume"] = _ama.MDTickExecution_exec_volume_get
    if _newclass:exec_volume = _swig_property(_ama.MDTickExecution_exec_volume_get, _ama.MDTickExecution_exec_volume_set)
    __swig_setmethods__["value_trade"] = _ama.MDTickExecution_value_trade_set
    __swig_getmethods__["value_trade"] = _ama.MDTickExecution_value_trade_get
    if _newclass:value_trade = _swig_property(_ama.MDTickExecution_value_trade_get, _ama.MDTickExecution_value_trade_set)
    __swig_setmethods__["bid_appl_seq_num"] = _ama.MDTickExecution_bid_appl_seq_num_set
    __swig_getmethods__["bid_appl_seq_num"] = _ama.MDTickExecution_bid_appl_seq_num_get
    if _newclass:bid_appl_seq_num = _swig_property(_ama.MDTickExecution_bid_appl_seq_num_get, _ama.MDTickExecution_bid_appl_seq_num_set)
    __swig_setmethods__["offer_appl_seq_num"] = _ama.MDTickExecution_offer_appl_seq_num_set
    __swig_getmethods__["offer_appl_seq_num"] = _ama.MDTickExecution_offer_appl_seq_num_get
    if _newclass:offer_appl_seq_num = _swig_property(_ama.MDTickExecution_offer_appl_seq_num_get, _ama.MDTickExecution_offer_appl_seq_num_set)
    __swig_setmethods__["side"] = _ama.MDTickExecution_side_set
    __swig_getmethods__["side"] = _ama.MDTickExecution_side_get
    if _newclass:side = _swig_property(_ama.MDTickExecution_side_get, _ama.MDTickExecution_side_set)
    __swig_setmethods__["exec_type"] = _ama.MDTickExecution_exec_type_set
    __swig_getmethods__["exec_type"] = _ama.MDTickExecution_exec_type_get
    if _newclass:exec_type = _swig_property(_ama.MDTickExecution_exec_type_get, _ama.MDTickExecution_exec_type_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDTickExecution_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDTickExecution_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDTickExecution_md_stream_id_get, _ama.MDTickExecution_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDTickExecution()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDTickExecution
    __del__ = lambda self : None;
MDTickExecution_swigregister = _ama.MDTickExecution_swigregister
MDTickExecution_swigregister(MDTickExecution)

class MDOrderQueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDOrderQueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDOrderQueue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDOrderQueue_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDOrderQueue_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDOrderQueue_market_type_get, _ama.MDOrderQueue_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDOrderQueue_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDOrderQueue_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDOrderQueue_security_code_get, _ama.MDOrderQueue_security_code_set)
    __swig_setmethods__["order_time"] = _ama.MDOrderQueue_order_time_set
    __swig_getmethods__["order_time"] = _ama.MDOrderQueue_order_time_get
    if _newclass:order_time = _swig_property(_ama.MDOrderQueue_order_time_get, _ama.MDOrderQueue_order_time_set)
    __swig_setmethods__["side"] = _ama.MDOrderQueue_side_set
    __swig_getmethods__["side"] = _ama.MDOrderQueue_side_get
    if _newclass:side = _swig_property(_ama.MDOrderQueue_side_get, _ama.MDOrderQueue_side_set)
    __swig_setmethods__["order_price"] = _ama.MDOrderQueue_order_price_set
    __swig_getmethods__["order_price"] = _ama.MDOrderQueue_order_price_get
    if _newclass:order_price = _swig_property(_ama.MDOrderQueue_order_price_get, _ama.MDOrderQueue_order_price_set)
    __swig_setmethods__["order_volume"] = _ama.MDOrderQueue_order_volume_set
    __swig_getmethods__["order_volume"] = _ama.MDOrderQueue_order_volume_get
    if _newclass:order_volume = _swig_property(_ama.MDOrderQueue_order_volume_get, _ama.MDOrderQueue_order_volume_set)
    __swig_setmethods__["num_of_orders"] = _ama.MDOrderQueue_num_of_orders_set
    __swig_getmethods__["num_of_orders"] = _ama.MDOrderQueue_num_of_orders_get
    if _newclass:num_of_orders = _swig_property(_ama.MDOrderQueue_num_of_orders_get, _ama.MDOrderQueue_num_of_orders_set)
    __swig_setmethods__["items"] = _ama.MDOrderQueue_items_set
    __swig_getmethods__["items"] = _ama.MDOrderQueue_items_get
    if _newclass:items = _swig_property(_ama.MDOrderQueue_items_get, _ama.MDOrderQueue_items_set)
    __swig_setmethods__["volume"] = _ama.MDOrderQueue_volume_set
    __swig_getmethods__["volume"] = _ama.MDOrderQueue_volume_get
    if _newclass:volume = _swig_property(_ama.MDOrderQueue_volume_get, _ama.MDOrderQueue_volume_set)
    __swig_setmethods__["channel_no"] = _ama.MDOrderQueue_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDOrderQueue_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDOrderQueue_channel_no_get, _ama.MDOrderQueue_channel_no_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDOrderQueue_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDOrderQueue_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDOrderQueue_md_stream_id_get, _ama.MDOrderQueue_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDOrderQueue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDOrderQueue
    __del__ = lambda self : None;
MDOrderQueue_swigregister = _ama.MDOrderQueue_swigregister
MDOrderQueue_swigregister(MDOrderQueue)

class MDOptionBasicInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDOptionBasicInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDOptionBasicInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDOptionBasicInfo_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDOptionBasicInfo_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDOptionBasicInfo_market_type_get, _ama.MDOptionBasicInfo_market_type_set)
    __swig_setmethods__["security_id"] = _ama.MDOptionBasicInfo_security_id_set
    __swig_getmethods__["security_id"] = _ama.MDOptionBasicInfo_security_id_get
    if _newclass:security_id = _swig_property(_ama.MDOptionBasicInfo_security_id_get, _ama.MDOptionBasicInfo_security_id_set)
    __swig_setmethods__["contract_id"] = _ama.MDOptionBasicInfo_contract_id_set
    __swig_getmethods__["contract_id"] = _ama.MDOptionBasicInfo_contract_id_get
    if _newclass:contract_id = _swig_property(_ama.MDOptionBasicInfo_contract_id_get, _ama.MDOptionBasicInfo_contract_id_set)
    __swig_setmethods__["contract_symbol"] = _ama.MDOptionBasicInfo_contract_symbol_set
    __swig_getmethods__["contract_symbol"] = _ama.MDOptionBasicInfo_contract_symbol_get
    if _newclass:contract_symbol = _swig_property(_ama.MDOptionBasicInfo_contract_symbol_get, _ama.MDOptionBasicInfo_contract_symbol_set)
    __swig_setmethods__["underlying_security_id"] = _ama.MDOptionBasicInfo_underlying_security_id_set
    __swig_getmethods__["underlying_security_id"] = _ama.MDOptionBasicInfo_underlying_security_id_get
    if _newclass:underlying_security_id = _swig_property(_ama.MDOptionBasicInfo_underlying_security_id_get, _ama.MDOptionBasicInfo_underlying_security_id_set)
    __swig_setmethods__["underlying_symbol"] = _ama.MDOptionBasicInfo_underlying_symbol_set
    __swig_getmethods__["underlying_symbol"] = _ama.MDOptionBasicInfo_underlying_symbol_get
    if _newclass:underlying_symbol = _swig_property(_ama.MDOptionBasicInfo_underlying_symbol_get, _ama.MDOptionBasicInfo_underlying_symbol_set)
    __swig_setmethods__["underlying_type"] = _ama.MDOptionBasicInfo_underlying_type_set
    __swig_getmethods__["underlying_type"] = _ama.MDOptionBasicInfo_underlying_type_get
    if _newclass:underlying_type = _swig_property(_ama.MDOptionBasicInfo_underlying_type_get, _ama.MDOptionBasicInfo_underlying_type_set)
    __swig_setmethods__["option_type"] = _ama.MDOptionBasicInfo_option_type_set
    __swig_getmethods__["option_type"] = _ama.MDOptionBasicInfo_option_type_get
    if _newclass:option_type = _swig_property(_ama.MDOptionBasicInfo_option_type_get, _ama.MDOptionBasicInfo_option_type_set)
    __swig_setmethods__["call_or_put"] = _ama.MDOptionBasicInfo_call_or_put_set
    __swig_getmethods__["call_or_put"] = _ama.MDOptionBasicInfo_call_or_put_get
    if _newclass:call_or_put = _swig_property(_ama.MDOptionBasicInfo_call_or_put_get, _ama.MDOptionBasicInfo_call_or_put_set)
    __swig_setmethods__["contract_multiplieri_unit"] = _ama.MDOptionBasicInfo_contract_multiplieri_unit_set
    __swig_getmethods__["contract_multiplieri_unit"] = _ama.MDOptionBasicInfo_contract_multiplieri_unit_get
    if _newclass:contract_multiplieri_unit = _swig_property(_ama.MDOptionBasicInfo_contract_multiplieri_unit_get, _ama.MDOptionBasicInfo_contract_multiplieri_unit_set)
    __swig_setmethods__["exercise_price"] = _ama.MDOptionBasicInfo_exercise_price_set
    __swig_getmethods__["exercise_price"] = _ama.MDOptionBasicInfo_exercise_price_get
    if _newclass:exercise_price = _swig_property(_ama.MDOptionBasicInfo_exercise_price_get, _ama.MDOptionBasicInfo_exercise_price_set)
    __swig_setmethods__["start_date"] = _ama.MDOptionBasicInfo_start_date_set
    __swig_getmethods__["start_date"] = _ama.MDOptionBasicInfo_start_date_get
    if _newclass:start_date = _swig_property(_ama.MDOptionBasicInfo_start_date_get, _ama.MDOptionBasicInfo_start_date_set)
    __swig_setmethods__["end_date"] = _ama.MDOptionBasicInfo_end_date_set
    __swig_getmethods__["end_date"] = _ama.MDOptionBasicInfo_end_date_get
    if _newclass:end_date = _swig_property(_ama.MDOptionBasicInfo_end_date_get, _ama.MDOptionBasicInfo_end_date_set)
    __swig_setmethods__["exercise_date"] = _ama.MDOptionBasicInfo_exercise_date_set
    __swig_getmethods__["exercise_date"] = _ama.MDOptionBasicInfo_exercise_date_get
    if _newclass:exercise_date = _swig_property(_ama.MDOptionBasicInfo_exercise_date_get, _ama.MDOptionBasicInfo_exercise_date_set)
    __swig_setmethods__["delivery_date"] = _ama.MDOptionBasicInfo_delivery_date_set
    __swig_getmethods__["delivery_date"] = _ama.MDOptionBasicInfo_delivery_date_get
    if _newclass:delivery_date = _swig_property(_ama.MDOptionBasicInfo_delivery_date_get, _ama.MDOptionBasicInfo_delivery_date_set)
    __swig_setmethods__["expire_date"] = _ama.MDOptionBasicInfo_expire_date_set
    __swig_getmethods__["expire_date"] = _ama.MDOptionBasicInfo_expire_date_get
    if _newclass:expire_date = _swig_property(_ama.MDOptionBasicInfo_expire_date_get, _ama.MDOptionBasicInfo_expire_date_set)
    __swig_setmethods__["update_version"] = _ama.MDOptionBasicInfo_update_version_set
    __swig_getmethods__["update_version"] = _ama.MDOptionBasicInfo_update_version_get
    if _newclass:update_version = _swig_property(_ama.MDOptionBasicInfo_update_version_get, _ama.MDOptionBasicInfo_update_version_set)
    __swig_setmethods__["total_long_position"] = _ama.MDOptionBasicInfo_total_long_position_set
    __swig_getmethods__["total_long_position"] = _ama.MDOptionBasicInfo_total_long_position_get
    if _newclass:total_long_position = _swig_property(_ama.MDOptionBasicInfo_total_long_position_get, _ama.MDOptionBasicInfo_total_long_position_set)
    __swig_setmethods__["pre_close_price"] = _ama.MDOptionBasicInfo_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = _ama.MDOptionBasicInfo_pre_close_price_get
    if _newclass:pre_close_price = _swig_property(_ama.MDOptionBasicInfo_pre_close_price_get, _ama.MDOptionBasicInfo_pre_close_price_set)
    __swig_setmethods__["pre_settl_price"] = _ama.MDOptionBasicInfo_pre_settl_price_set
    __swig_getmethods__["pre_settl_price"] = _ama.MDOptionBasicInfo_pre_settl_price_get
    if _newclass:pre_settl_price = _swig_property(_ama.MDOptionBasicInfo_pre_settl_price_get, _ama.MDOptionBasicInfo_pre_settl_price_set)
    __swig_setmethods__["underlying_pre_close_price"] = _ama.MDOptionBasicInfo_underlying_pre_close_price_set
    __swig_getmethods__["underlying_pre_close_price"] = _ama.MDOptionBasicInfo_underlying_pre_close_price_get
    if _newclass:underlying_pre_close_price = _swig_property(_ama.MDOptionBasicInfo_underlying_pre_close_price_get, _ama.MDOptionBasicInfo_underlying_pre_close_price_set)
    __swig_setmethods__["price_limit_type"] = _ama.MDOptionBasicInfo_price_limit_type_set
    __swig_getmethods__["price_limit_type"] = _ama.MDOptionBasicInfo_price_limit_type_get
    if _newclass:price_limit_type = _swig_property(_ama.MDOptionBasicInfo_price_limit_type_get, _ama.MDOptionBasicInfo_price_limit_type_set)
    __swig_setmethods__["high_limited"] = _ama.MDOptionBasicInfo_high_limited_set
    __swig_getmethods__["high_limited"] = _ama.MDOptionBasicInfo_high_limited_get
    if _newclass:high_limited = _swig_property(_ama.MDOptionBasicInfo_high_limited_get, _ama.MDOptionBasicInfo_high_limited_set)
    __swig_setmethods__["low_limited"] = _ama.MDOptionBasicInfo_low_limited_set
    __swig_getmethods__["low_limited"] = _ama.MDOptionBasicInfo_low_limited_get
    if _newclass:low_limited = _swig_property(_ama.MDOptionBasicInfo_low_limited_get, _ama.MDOptionBasicInfo_low_limited_set)
    __swig_setmethods__["margin_unit"] = _ama.MDOptionBasicInfo_margin_unit_set
    __swig_getmethods__["margin_unit"] = _ama.MDOptionBasicInfo_margin_unit_get
    if _newclass:margin_unit = _swig_property(_ama.MDOptionBasicInfo_margin_unit_get, _ama.MDOptionBasicInfo_margin_unit_set)
    __swig_setmethods__["margin_ratio_param1"] = _ama.MDOptionBasicInfo_margin_ratio_param1_set
    __swig_getmethods__["margin_ratio_param1"] = _ama.MDOptionBasicInfo_margin_ratio_param1_get
    if _newclass:margin_ratio_param1 = _swig_property(_ama.MDOptionBasicInfo_margin_ratio_param1_get, _ama.MDOptionBasicInfo_margin_ratio_param1_set)
    __swig_setmethods__["margin_ratio_param2"] = _ama.MDOptionBasicInfo_margin_ratio_param2_set
    __swig_getmethods__["margin_ratio_param2"] = _ama.MDOptionBasicInfo_margin_ratio_param2_get
    if _newclass:margin_ratio_param2 = _swig_property(_ama.MDOptionBasicInfo_margin_ratio_param2_get, _ama.MDOptionBasicInfo_margin_ratio_param2_set)
    __swig_setmethods__["round_lot"] = _ama.MDOptionBasicInfo_round_lot_set
    __swig_getmethods__["round_lot"] = _ama.MDOptionBasicInfo_round_lot_get
    if _newclass:round_lot = _swig_property(_ama.MDOptionBasicInfo_round_lot_get, _ama.MDOptionBasicInfo_round_lot_set)
    __swig_setmethods__["lmt_ord_min_floor"] = _ama.MDOptionBasicInfo_lmt_ord_min_floor_set
    __swig_getmethods__["lmt_ord_min_floor"] = _ama.MDOptionBasicInfo_lmt_ord_min_floor_get
    if _newclass:lmt_ord_min_floor = _swig_property(_ama.MDOptionBasicInfo_lmt_ord_min_floor_get, _ama.MDOptionBasicInfo_lmt_ord_min_floor_set)
    __swig_setmethods__["lmt_ord_max_floor"] = _ama.MDOptionBasicInfo_lmt_ord_max_floor_set
    __swig_getmethods__["lmt_ord_max_floor"] = _ama.MDOptionBasicInfo_lmt_ord_max_floor_get
    if _newclass:lmt_ord_max_floor = _swig_property(_ama.MDOptionBasicInfo_lmt_ord_max_floor_get, _ama.MDOptionBasicInfo_lmt_ord_max_floor_set)
    __swig_setmethods__["mkt_ord_min_floor"] = _ama.MDOptionBasicInfo_mkt_ord_min_floor_set
    __swig_getmethods__["mkt_ord_min_floor"] = _ama.MDOptionBasicInfo_mkt_ord_min_floor_get
    if _newclass:mkt_ord_min_floor = _swig_property(_ama.MDOptionBasicInfo_mkt_ord_min_floor_get, _ama.MDOptionBasicInfo_mkt_ord_min_floor_set)
    __swig_setmethods__["mkt_ord_max_floor"] = _ama.MDOptionBasicInfo_mkt_ord_max_floor_set
    __swig_getmethods__["mkt_ord_max_floor"] = _ama.MDOptionBasicInfo_mkt_ord_max_floor_get
    if _newclass:mkt_ord_max_floor = _swig_property(_ama.MDOptionBasicInfo_mkt_ord_max_floor_get, _ama.MDOptionBasicInfo_mkt_ord_max_floor_set)
    __swig_setmethods__["tick_size"] = _ama.MDOptionBasicInfo_tick_size_set
    __swig_getmethods__["tick_size"] = _ama.MDOptionBasicInfo_tick_size_get
    if _newclass:tick_size = _swig_property(_ama.MDOptionBasicInfo_tick_size_get, _ama.MDOptionBasicInfo_tick_size_set)
    __swig_setmethods__["security_status_flag"] = _ama.MDOptionBasicInfo_security_status_flag_set
    __swig_getmethods__["security_status_flag"] = _ama.MDOptionBasicInfo_security_status_flag_get
    if _newclass:security_status_flag = _swig_property(_ama.MDOptionBasicInfo_security_status_flag_get, _ama.MDOptionBasicInfo_security_status_flag_set)
    def __init__(self): 
        this = _ama.new_MDOptionBasicInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDOptionBasicInfo
    __del__ = lambda self : None;
MDOptionBasicInfo_swigregister = _ama.MDOptionBasicInfo_swigregister
MDOptionBasicInfo_swigregister(MDOptionBasicInfo)

class MDOptionSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDOptionSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDOptionSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDOptionSnapshot_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDOptionSnapshot_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDOptionSnapshot_market_type_get, _ama.MDOptionSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDOptionSnapshot_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDOptionSnapshot_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDOptionSnapshot_security_code_get, _ama.MDOptionSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = _ama.MDOptionSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = _ama.MDOptionSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(_ama.MDOptionSnapshot_orig_time_get, _ama.MDOptionSnapshot_orig_time_set)
    __swig_setmethods__["pre_settle_price"] = _ama.MDOptionSnapshot_pre_settle_price_set
    __swig_getmethods__["pre_settle_price"] = _ama.MDOptionSnapshot_pre_settle_price_get
    if _newclass:pre_settle_price = _swig_property(_ama.MDOptionSnapshot_pre_settle_price_get, _ama.MDOptionSnapshot_pre_settle_price_set)
    __swig_setmethods__["pre_close_price"] = _ama.MDOptionSnapshot_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = _ama.MDOptionSnapshot_pre_close_price_get
    if _newclass:pre_close_price = _swig_property(_ama.MDOptionSnapshot_pre_close_price_get, _ama.MDOptionSnapshot_pre_close_price_set)
    __swig_setmethods__["open_price"] = _ama.MDOptionSnapshot_open_price_set
    __swig_getmethods__["open_price"] = _ama.MDOptionSnapshot_open_price_get
    if _newclass:open_price = _swig_property(_ama.MDOptionSnapshot_open_price_get, _ama.MDOptionSnapshot_open_price_set)
    __swig_setmethods__["auction_price"] = _ama.MDOptionSnapshot_auction_price_set
    __swig_getmethods__["auction_price"] = _ama.MDOptionSnapshot_auction_price_get
    if _newclass:auction_price = _swig_property(_ama.MDOptionSnapshot_auction_price_get, _ama.MDOptionSnapshot_auction_price_set)
    __swig_setmethods__["auction_volume"] = _ama.MDOptionSnapshot_auction_volume_set
    __swig_getmethods__["auction_volume"] = _ama.MDOptionSnapshot_auction_volume_get
    if _newclass:auction_volume = _swig_property(_ama.MDOptionSnapshot_auction_volume_get, _ama.MDOptionSnapshot_auction_volume_set)
    __swig_setmethods__["high_price"] = _ama.MDOptionSnapshot_high_price_set
    __swig_getmethods__["high_price"] = _ama.MDOptionSnapshot_high_price_get
    if _newclass:high_price = _swig_property(_ama.MDOptionSnapshot_high_price_get, _ama.MDOptionSnapshot_high_price_set)
    __swig_setmethods__["low_price"] = _ama.MDOptionSnapshot_low_price_set
    __swig_getmethods__["low_price"] = _ama.MDOptionSnapshot_low_price_get
    if _newclass:low_price = _swig_property(_ama.MDOptionSnapshot_low_price_get, _ama.MDOptionSnapshot_low_price_set)
    __swig_setmethods__["last_price"] = _ama.MDOptionSnapshot_last_price_set
    __swig_getmethods__["last_price"] = _ama.MDOptionSnapshot_last_price_get
    if _newclass:last_price = _swig_property(_ama.MDOptionSnapshot_last_price_get, _ama.MDOptionSnapshot_last_price_set)
    __swig_setmethods__["close_price"] = _ama.MDOptionSnapshot_close_price_set
    __swig_getmethods__["close_price"] = _ama.MDOptionSnapshot_close_price_get
    if _newclass:close_price = _swig_property(_ama.MDOptionSnapshot_close_price_get, _ama.MDOptionSnapshot_close_price_set)
    __swig_setmethods__["high_limited"] = _ama.MDOptionSnapshot_high_limited_set
    __swig_getmethods__["high_limited"] = _ama.MDOptionSnapshot_high_limited_get
    if _newclass:high_limited = _swig_property(_ama.MDOptionSnapshot_high_limited_get, _ama.MDOptionSnapshot_high_limited_set)
    __swig_setmethods__["low_limited"] = _ama.MDOptionSnapshot_low_limited_set
    __swig_getmethods__["low_limited"] = _ama.MDOptionSnapshot_low_limited_get
    if _newclass:low_limited = _swig_property(_ama.MDOptionSnapshot_low_limited_get, _ama.MDOptionSnapshot_low_limited_set)
    __swig_setmethods__["bid_price"] = _ama.MDOptionSnapshot_bid_price_set
    __swig_getmethods__["bid_price"] = _ama.MDOptionSnapshot_bid_price_get
    if _newclass:bid_price = _swig_property(_ama.MDOptionSnapshot_bid_price_get, _ama.MDOptionSnapshot_bid_price_set)
    __swig_setmethods__["bid_volume"] = _ama.MDOptionSnapshot_bid_volume_set
    __swig_getmethods__["bid_volume"] = _ama.MDOptionSnapshot_bid_volume_get
    if _newclass:bid_volume = _swig_property(_ama.MDOptionSnapshot_bid_volume_get, _ama.MDOptionSnapshot_bid_volume_set)
    __swig_setmethods__["offer_price"] = _ama.MDOptionSnapshot_offer_price_set
    __swig_getmethods__["offer_price"] = _ama.MDOptionSnapshot_offer_price_get
    if _newclass:offer_price = _swig_property(_ama.MDOptionSnapshot_offer_price_get, _ama.MDOptionSnapshot_offer_price_set)
    __swig_setmethods__["offer_volume"] = _ama.MDOptionSnapshot_offer_volume_set
    __swig_getmethods__["offer_volume"] = _ama.MDOptionSnapshot_offer_volume_get
    if _newclass:offer_volume = _swig_property(_ama.MDOptionSnapshot_offer_volume_get, _ama.MDOptionSnapshot_offer_volume_set)
    __swig_setmethods__["settle_price"] = _ama.MDOptionSnapshot_settle_price_set
    __swig_getmethods__["settle_price"] = _ama.MDOptionSnapshot_settle_price_get
    if _newclass:settle_price = _swig_property(_ama.MDOptionSnapshot_settle_price_get, _ama.MDOptionSnapshot_settle_price_set)
    __swig_setmethods__["total_long_position"] = _ama.MDOptionSnapshot_total_long_position_set
    __swig_getmethods__["total_long_position"] = _ama.MDOptionSnapshot_total_long_position_get
    if _newclass:total_long_position = _swig_property(_ama.MDOptionSnapshot_total_long_position_get, _ama.MDOptionSnapshot_total_long_position_set)
    __swig_setmethods__["total_volume_trade"] = _ama.MDOptionSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = _ama.MDOptionSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(_ama.MDOptionSnapshot_total_volume_trade_get, _ama.MDOptionSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = _ama.MDOptionSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = _ama.MDOptionSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(_ama.MDOptionSnapshot_total_value_trade_get, _ama.MDOptionSnapshot_total_value_trade_set)
    __swig_setmethods__["trading_phase_code"] = _ama.MDOptionSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = _ama.MDOptionSnapshot_trading_phase_code_get
    if _newclass:trading_phase_code = _swig_property(_ama.MDOptionSnapshot_trading_phase_code_get, _ama.MDOptionSnapshot_trading_phase_code_set)
    __swig_setmethods__["channel_no"] = _ama.MDOptionSnapshot_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDOptionSnapshot_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDOptionSnapshot_channel_no_get, _ama.MDOptionSnapshot_channel_no_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDOptionSnapshot_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDOptionSnapshot_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDOptionSnapshot_md_stream_id_get, _ama.MDOptionSnapshot_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDOptionSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDOptionSnapshot
    __del__ = lambda self : None;
MDOptionSnapshot_swigregister = _ama.MDOptionSnapshot_swigregister
MDOptionSnapshot_swigregister(MDOptionSnapshot)

class MDHKTSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDHKTSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDHKTSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDHKTSnapshot_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDHKTSnapshot_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDHKTSnapshot_market_type_get, _ama.MDHKTSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDHKTSnapshot_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDHKTSnapshot_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDHKTSnapshot_security_code_get, _ama.MDHKTSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = _ama.MDHKTSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = _ama.MDHKTSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(_ama.MDHKTSnapshot_orig_time_get, _ama.MDHKTSnapshot_orig_time_set)
    __swig_setmethods__["pre_close_price"] = _ama.MDHKTSnapshot_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = _ama.MDHKTSnapshot_pre_close_price_get
    if _newclass:pre_close_price = _swig_property(_ama.MDHKTSnapshot_pre_close_price_get, _ama.MDHKTSnapshot_pre_close_price_set)
    __swig_setmethods__["nominal_price"] = _ama.MDHKTSnapshot_nominal_price_set
    __swig_getmethods__["nominal_price"] = _ama.MDHKTSnapshot_nominal_price_get
    if _newclass:nominal_price = _swig_property(_ama.MDHKTSnapshot_nominal_price_get, _ama.MDHKTSnapshot_nominal_price_set)
    __swig_setmethods__["high_price"] = _ama.MDHKTSnapshot_high_price_set
    __swig_getmethods__["high_price"] = _ama.MDHKTSnapshot_high_price_get
    if _newclass:high_price = _swig_property(_ama.MDHKTSnapshot_high_price_get, _ama.MDHKTSnapshot_high_price_set)
    __swig_setmethods__["low_price"] = _ama.MDHKTSnapshot_low_price_set
    __swig_getmethods__["low_price"] = _ama.MDHKTSnapshot_low_price_get
    if _newclass:low_price = _swig_property(_ama.MDHKTSnapshot_low_price_get, _ama.MDHKTSnapshot_low_price_set)
    __swig_setmethods__["last_price"] = _ama.MDHKTSnapshot_last_price_set
    __swig_getmethods__["last_price"] = _ama.MDHKTSnapshot_last_price_get
    if _newclass:last_price = _swig_property(_ama.MDHKTSnapshot_last_price_get, _ama.MDHKTSnapshot_last_price_set)
    __swig_setmethods__["bid_price"] = _ama.MDHKTSnapshot_bid_price_set
    __swig_getmethods__["bid_price"] = _ama.MDHKTSnapshot_bid_price_get
    if _newclass:bid_price = _swig_property(_ama.MDHKTSnapshot_bid_price_get, _ama.MDHKTSnapshot_bid_price_set)
    __swig_setmethods__["bid_volume"] = _ama.MDHKTSnapshot_bid_volume_set
    __swig_getmethods__["bid_volume"] = _ama.MDHKTSnapshot_bid_volume_get
    if _newclass:bid_volume = _swig_property(_ama.MDHKTSnapshot_bid_volume_get, _ama.MDHKTSnapshot_bid_volume_set)
    __swig_setmethods__["offer_price"] = _ama.MDHKTSnapshot_offer_price_set
    __swig_getmethods__["offer_price"] = _ama.MDHKTSnapshot_offer_price_get
    if _newclass:offer_price = _swig_property(_ama.MDHKTSnapshot_offer_price_get, _ama.MDHKTSnapshot_offer_price_set)
    __swig_setmethods__["offer_volume"] = _ama.MDHKTSnapshot_offer_volume_set
    __swig_getmethods__["offer_volume"] = _ama.MDHKTSnapshot_offer_volume_get
    if _newclass:offer_volume = _swig_property(_ama.MDHKTSnapshot_offer_volume_get, _ama.MDHKTSnapshot_offer_volume_set)
    __swig_setmethods__["total_volume_trade"] = _ama.MDHKTSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = _ama.MDHKTSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(_ama.MDHKTSnapshot_total_volume_trade_get, _ama.MDHKTSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = _ama.MDHKTSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = _ama.MDHKTSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(_ama.MDHKTSnapshot_total_value_trade_get, _ama.MDHKTSnapshot_total_value_trade_set)
    __swig_setmethods__["trading_phase_code"] = _ama.MDHKTSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = _ama.MDHKTSnapshot_trading_phase_code_get
    if _newclass:trading_phase_code = _swig_property(_ama.MDHKTSnapshot_trading_phase_code_get, _ama.MDHKTSnapshot_trading_phase_code_set)
    __swig_setmethods__["channel_no"] = _ama.MDHKTSnapshot_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDHKTSnapshot_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDHKTSnapshot_channel_no_get, _ama.MDHKTSnapshot_channel_no_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDHKTSnapshot_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDHKTSnapshot_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDHKTSnapshot_md_stream_id_get, _ama.MDHKTSnapshot_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDHKTSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDHKTSnapshot
    __del__ = lambda self : None;
MDHKTSnapshot_swigregister = _ama.MDHKTSnapshot_swigregister
MDHKTSnapshot_swigregister(MDHKTSnapshot)

class MDAfterHourFixedPriceSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDAfterHourFixedPriceSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDAfterHourFixedPriceSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDAfterHourFixedPriceSnapshot_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDAfterHourFixedPriceSnapshot_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_market_type_get, _ama.MDAfterHourFixedPriceSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDAfterHourFixedPriceSnapshot_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDAfterHourFixedPriceSnapshot_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_security_code_get, _ama.MDAfterHourFixedPriceSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = _ama.MDAfterHourFixedPriceSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = _ama.MDAfterHourFixedPriceSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_orig_time_get, _ama.MDAfterHourFixedPriceSnapshot_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = _ama.MDAfterHourFixedPriceSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = _ama.MDAfterHourFixedPriceSnapshot_trading_phase_code_get
    if _newclass:trading_phase_code = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_trading_phase_code_get, _ama.MDAfterHourFixedPriceSnapshot_trading_phase_code_set)
    __swig_setmethods__["close_price"] = _ama.MDAfterHourFixedPriceSnapshot_close_price_set
    __swig_getmethods__["close_price"] = _ama.MDAfterHourFixedPriceSnapshot_close_price_get
    if _newclass:close_price = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_close_price_get, _ama.MDAfterHourFixedPriceSnapshot_close_price_set)
    __swig_setmethods__["bid_price"] = _ama.MDAfterHourFixedPriceSnapshot_bid_price_set
    __swig_getmethods__["bid_price"] = _ama.MDAfterHourFixedPriceSnapshot_bid_price_get
    if _newclass:bid_price = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_bid_price_get, _ama.MDAfterHourFixedPriceSnapshot_bid_price_set)
    __swig_setmethods__["bid_volume"] = _ama.MDAfterHourFixedPriceSnapshot_bid_volume_set
    __swig_getmethods__["bid_volume"] = _ama.MDAfterHourFixedPriceSnapshot_bid_volume_get
    if _newclass:bid_volume = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_bid_volume_get, _ama.MDAfterHourFixedPriceSnapshot_bid_volume_set)
    __swig_setmethods__["offer_price"] = _ama.MDAfterHourFixedPriceSnapshot_offer_price_set
    __swig_getmethods__["offer_price"] = _ama.MDAfterHourFixedPriceSnapshot_offer_price_get
    if _newclass:offer_price = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_offer_price_get, _ama.MDAfterHourFixedPriceSnapshot_offer_price_set)
    __swig_setmethods__["offer_volume"] = _ama.MDAfterHourFixedPriceSnapshot_offer_volume_set
    __swig_getmethods__["offer_volume"] = _ama.MDAfterHourFixedPriceSnapshot_offer_volume_get
    if _newclass:offer_volume = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_offer_volume_get, _ama.MDAfterHourFixedPriceSnapshot_offer_volume_set)
    __swig_setmethods__["pre_close_price"] = _ama.MDAfterHourFixedPriceSnapshot_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = _ama.MDAfterHourFixedPriceSnapshot_pre_close_price_get
    if _newclass:pre_close_price = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_pre_close_price_get, _ama.MDAfterHourFixedPriceSnapshot_pre_close_price_set)
    __swig_setmethods__["num_trades"] = _ama.MDAfterHourFixedPriceSnapshot_num_trades_set
    __swig_getmethods__["num_trades"] = _ama.MDAfterHourFixedPriceSnapshot_num_trades_get
    if _newclass:num_trades = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_num_trades_get, _ama.MDAfterHourFixedPriceSnapshot_num_trades_set)
    __swig_setmethods__["total_volume_trade"] = _ama.MDAfterHourFixedPriceSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = _ama.MDAfterHourFixedPriceSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_total_volume_trade_get, _ama.MDAfterHourFixedPriceSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = _ama.MDAfterHourFixedPriceSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = _ama.MDAfterHourFixedPriceSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_total_value_trade_get, _ama.MDAfterHourFixedPriceSnapshot_total_value_trade_set)
    __swig_setmethods__["total_bid_volume"] = _ama.MDAfterHourFixedPriceSnapshot_total_bid_volume_set
    __swig_getmethods__["total_bid_volume"] = _ama.MDAfterHourFixedPriceSnapshot_total_bid_volume_get
    if _newclass:total_bid_volume = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_total_bid_volume_get, _ama.MDAfterHourFixedPriceSnapshot_total_bid_volume_set)
    __swig_setmethods__["total_offer_volume"] = _ama.MDAfterHourFixedPriceSnapshot_total_offer_volume_set
    __swig_getmethods__["total_offer_volume"] = _ama.MDAfterHourFixedPriceSnapshot_total_offer_volume_get
    if _newclass:total_offer_volume = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_total_offer_volume_get, _ama.MDAfterHourFixedPriceSnapshot_total_offer_volume_set)
    __swig_setmethods__["channel_no"] = _ama.MDAfterHourFixedPriceSnapshot_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDAfterHourFixedPriceSnapshot_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_channel_no_get, _ama.MDAfterHourFixedPriceSnapshot_channel_no_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDAfterHourFixedPriceSnapshot_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDAfterHourFixedPriceSnapshot_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDAfterHourFixedPriceSnapshot_md_stream_id_get, _ama.MDAfterHourFixedPriceSnapshot_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDAfterHourFixedPriceSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDAfterHourFixedPriceSnapshot
    __del__ = lambda self : None;
MDAfterHourFixedPriceSnapshot_swigregister = _ama.MDAfterHourFixedPriceSnapshot_swigregister
MDAfterHourFixedPriceSnapshot_swigregister(MDAfterHourFixedPriceSnapshot)

class MDAfterHourFixedPriceTickExecution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDAfterHourFixedPriceTickExecution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDAfterHourFixedPriceTickExecution, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDAfterHourFixedPriceTickExecution_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDAfterHourFixedPriceTickExecution_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDAfterHourFixedPriceTickExecution_market_type_get, _ama.MDAfterHourFixedPriceTickExecution_market_type_set)
    __swig_setmethods__["appl_seq_num"] = _ama.MDAfterHourFixedPriceTickExecution_appl_seq_num_set
    __swig_getmethods__["appl_seq_num"] = _ama.MDAfterHourFixedPriceTickExecution_appl_seq_num_get
    if _newclass:appl_seq_num = _swig_property(_ama.MDAfterHourFixedPriceTickExecution_appl_seq_num_get, _ama.MDAfterHourFixedPriceTickExecution_appl_seq_num_set)
    __swig_setmethods__["security_code"] = _ama.MDAfterHourFixedPriceTickExecution_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDAfterHourFixedPriceTickExecution_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDAfterHourFixedPriceTickExecution_security_code_get, _ama.MDAfterHourFixedPriceTickExecution_security_code_set)
    __swig_setmethods__["exec_time"] = _ama.MDAfterHourFixedPriceTickExecution_exec_time_set
    __swig_getmethods__["exec_time"] = _ama.MDAfterHourFixedPriceTickExecution_exec_time_get
    if _newclass:exec_time = _swig_property(_ama.MDAfterHourFixedPriceTickExecution_exec_time_get, _ama.MDAfterHourFixedPriceTickExecution_exec_time_set)
    __swig_setmethods__["exec_price"] = _ama.MDAfterHourFixedPriceTickExecution_exec_price_set
    __swig_getmethods__["exec_price"] = _ama.MDAfterHourFixedPriceTickExecution_exec_price_get
    if _newclass:exec_price = _swig_property(_ama.MDAfterHourFixedPriceTickExecution_exec_price_get, _ama.MDAfterHourFixedPriceTickExecution_exec_price_set)
    __swig_setmethods__["exec_volume"] = _ama.MDAfterHourFixedPriceTickExecution_exec_volume_set
    __swig_getmethods__["exec_volume"] = _ama.MDAfterHourFixedPriceTickExecution_exec_volume_get
    if _newclass:exec_volume = _swig_property(_ama.MDAfterHourFixedPriceTickExecution_exec_volume_get, _ama.MDAfterHourFixedPriceTickExecution_exec_volume_set)
    __swig_setmethods__["value_trade"] = _ama.MDAfterHourFixedPriceTickExecution_value_trade_set
    __swig_getmethods__["value_trade"] = _ama.MDAfterHourFixedPriceTickExecution_value_trade_get
    if _newclass:value_trade = _swig_property(_ama.MDAfterHourFixedPriceTickExecution_value_trade_get, _ama.MDAfterHourFixedPriceTickExecution_value_trade_set)
    __swig_setmethods__["bid_appl_seq_num"] = _ama.MDAfterHourFixedPriceTickExecution_bid_appl_seq_num_set
    __swig_getmethods__["bid_appl_seq_num"] = _ama.MDAfterHourFixedPriceTickExecution_bid_appl_seq_num_get
    if _newclass:bid_appl_seq_num = _swig_property(_ama.MDAfterHourFixedPriceTickExecution_bid_appl_seq_num_get, _ama.MDAfterHourFixedPriceTickExecution_bid_appl_seq_num_set)
    __swig_setmethods__["offer_appl_seq_num"] = _ama.MDAfterHourFixedPriceTickExecution_offer_appl_seq_num_set
    __swig_getmethods__["offer_appl_seq_num"] = _ama.MDAfterHourFixedPriceTickExecution_offer_appl_seq_num_get
    if _newclass:offer_appl_seq_num = _swig_property(_ama.MDAfterHourFixedPriceTickExecution_offer_appl_seq_num_get, _ama.MDAfterHourFixedPriceTickExecution_offer_appl_seq_num_set)
    __swig_setmethods__["side"] = _ama.MDAfterHourFixedPriceTickExecution_side_set
    __swig_getmethods__["side"] = _ama.MDAfterHourFixedPriceTickExecution_side_get
    if _newclass:side = _swig_property(_ama.MDAfterHourFixedPriceTickExecution_side_get, _ama.MDAfterHourFixedPriceTickExecution_side_set)
    __swig_setmethods__["exec_type"] = _ama.MDAfterHourFixedPriceTickExecution_exec_type_set
    __swig_getmethods__["exec_type"] = _ama.MDAfterHourFixedPriceTickExecution_exec_type_get
    if _newclass:exec_type = _swig_property(_ama.MDAfterHourFixedPriceTickExecution_exec_type_get, _ama.MDAfterHourFixedPriceTickExecution_exec_type_set)
    __swig_setmethods__["channel_no"] = _ama.MDAfterHourFixedPriceTickExecution_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDAfterHourFixedPriceTickExecution_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDAfterHourFixedPriceTickExecution_channel_no_get, _ama.MDAfterHourFixedPriceTickExecution_channel_no_set)
    def __init__(self): 
        this = _ama.new_MDAfterHourFixedPriceTickExecution()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDAfterHourFixedPriceTickExecution
    __del__ = lambda self : None;
MDAfterHourFixedPriceTickExecution_swigregister = _ama.MDAfterHourFixedPriceTickExecution_swigregister
MDAfterHourFixedPriceTickExecution_swigregister(MDAfterHourFixedPriceTickExecution)

class MDFutureSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDFutureSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDFutureSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDFutureSnapshot_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDFutureSnapshot_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDFutureSnapshot_market_type_get, _ama.MDFutureSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDFutureSnapshot_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDFutureSnapshot_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDFutureSnapshot_security_code_get, _ama.MDFutureSnapshot_security_code_set)
    __swig_setmethods__["action_day"] = _ama.MDFutureSnapshot_action_day_set
    __swig_getmethods__["action_day"] = _ama.MDFutureSnapshot_action_day_get
    if _newclass:action_day = _swig_property(_ama.MDFutureSnapshot_action_day_get, _ama.MDFutureSnapshot_action_day_set)
    __swig_setmethods__["orig_time"] = _ama.MDFutureSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = _ama.MDFutureSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(_ama.MDFutureSnapshot_orig_time_get, _ama.MDFutureSnapshot_orig_time_set)
    __swig_setmethods__["exchange_inst_id"] = _ama.MDFutureSnapshot_exchange_inst_id_set
    __swig_getmethods__["exchange_inst_id"] = _ama.MDFutureSnapshot_exchange_inst_id_get
    if _newclass:exchange_inst_id = _swig_property(_ama.MDFutureSnapshot_exchange_inst_id_get, _ama.MDFutureSnapshot_exchange_inst_id_set)
    __swig_setmethods__["last_price"] = _ama.MDFutureSnapshot_last_price_set
    __swig_getmethods__["last_price"] = _ama.MDFutureSnapshot_last_price_get
    if _newclass:last_price = _swig_property(_ama.MDFutureSnapshot_last_price_get, _ama.MDFutureSnapshot_last_price_set)
    __swig_setmethods__["pre_settle_price"] = _ama.MDFutureSnapshot_pre_settle_price_set
    __swig_getmethods__["pre_settle_price"] = _ama.MDFutureSnapshot_pre_settle_price_get
    if _newclass:pre_settle_price = _swig_property(_ama.MDFutureSnapshot_pre_settle_price_get, _ama.MDFutureSnapshot_pre_settle_price_set)
    __swig_setmethods__["pre_close_price"] = _ama.MDFutureSnapshot_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = _ama.MDFutureSnapshot_pre_close_price_get
    if _newclass:pre_close_price = _swig_property(_ama.MDFutureSnapshot_pre_close_price_get, _ama.MDFutureSnapshot_pre_close_price_set)
    __swig_setmethods__["pre_open_interest"] = _ama.MDFutureSnapshot_pre_open_interest_set
    __swig_getmethods__["pre_open_interest"] = _ama.MDFutureSnapshot_pre_open_interest_get
    if _newclass:pre_open_interest = _swig_property(_ama.MDFutureSnapshot_pre_open_interest_get, _ama.MDFutureSnapshot_pre_open_interest_set)
    __swig_setmethods__["open_price"] = _ama.MDFutureSnapshot_open_price_set
    __swig_getmethods__["open_price"] = _ama.MDFutureSnapshot_open_price_get
    if _newclass:open_price = _swig_property(_ama.MDFutureSnapshot_open_price_get, _ama.MDFutureSnapshot_open_price_set)
    __swig_setmethods__["high_price"] = _ama.MDFutureSnapshot_high_price_set
    __swig_getmethods__["high_price"] = _ama.MDFutureSnapshot_high_price_get
    if _newclass:high_price = _swig_property(_ama.MDFutureSnapshot_high_price_get, _ama.MDFutureSnapshot_high_price_set)
    __swig_setmethods__["low_price"] = _ama.MDFutureSnapshot_low_price_set
    __swig_getmethods__["low_price"] = _ama.MDFutureSnapshot_low_price_get
    if _newclass:low_price = _swig_property(_ama.MDFutureSnapshot_low_price_get, _ama.MDFutureSnapshot_low_price_set)
    __swig_setmethods__["total_volume_trade"] = _ama.MDFutureSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = _ama.MDFutureSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(_ama.MDFutureSnapshot_total_volume_trade_get, _ama.MDFutureSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = _ama.MDFutureSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = _ama.MDFutureSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(_ama.MDFutureSnapshot_total_value_trade_get, _ama.MDFutureSnapshot_total_value_trade_set)
    __swig_setmethods__["open_interest"] = _ama.MDFutureSnapshot_open_interest_set
    __swig_getmethods__["open_interest"] = _ama.MDFutureSnapshot_open_interest_get
    if _newclass:open_interest = _swig_property(_ama.MDFutureSnapshot_open_interest_get, _ama.MDFutureSnapshot_open_interest_set)
    __swig_setmethods__["close_price"] = _ama.MDFutureSnapshot_close_price_set
    __swig_getmethods__["close_price"] = _ama.MDFutureSnapshot_close_price_get
    if _newclass:close_price = _swig_property(_ama.MDFutureSnapshot_close_price_get, _ama.MDFutureSnapshot_close_price_set)
    __swig_setmethods__["settle_price"] = _ama.MDFutureSnapshot_settle_price_set
    __swig_getmethods__["settle_price"] = _ama.MDFutureSnapshot_settle_price_get
    if _newclass:settle_price = _swig_property(_ama.MDFutureSnapshot_settle_price_get, _ama.MDFutureSnapshot_settle_price_set)
    __swig_setmethods__["high_limited"] = _ama.MDFutureSnapshot_high_limited_set
    __swig_getmethods__["high_limited"] = _ama.MDFutureSnapshot_high_limited_get
    if _newclass:high_limited = _swig_property(_ama.MDFutureSnapshot_high_limited_get, _ama.MDFutureSnapshot_high_limited_set)
    __swig_setmethods__["low_limited"] = _ama.MDFutureSnapshot_low_limited_set
    __swig_getmethods__["low_limited"] = _ama.MDFutureSnapshot_low_limited_get
    if _newclass:low_limited = _swig_property(_ama.MDFutureSnapshot_low_limited_get, _ama.MDFutureSnapshot_low_limited_set)
    __swig_setmethods__["pre_delta"] = _ama.MDFutureSnapshot_pre_delta_set
    __swig_getmethods__["pre_delta"] = _ama.MDFutureSnapshot_pre_delta_get
    if _newclass:pre_delta = _swig_property(_ama.MDFutureSnapshot_pre_delta_get, _ama.MDFutureSnapshot_pre_delta_set)
    __swig_setmethods__["curr_delta"] = _ama.MDFutureSnapshot_curr_delta_set
    __swig_getmethods__["curr_delta"] = _ama.MDFutureSnapshot_curr_delta_get
    if _newclass:curr_delta = _swig_property(_ama.MDFutureSnapshot_curr_delta_get, _ama.MDFutureSnapshot_curr_delta_set)
    __swig_setmethods__["bid_price"] = _ama.MDFutureSnapshot_bid_price_set
    __swig_getmethods__["bid_price"] = _ama.MDFutureSnapshot_bid_price_get
    if _newclass:bid_price = _swig_property(_ama.MDFutureSnapshot_bid_price_get, _ama.MDFutureSnapshot_bid_price_set)
    __swig_setmethods__["bid_volume"] = _ama.MDFutureSnapshot_bid_volume_set
    __swig_getmethods__["bid_volume"] = _ama.MDFutureSnapshot_bid_volume_get
    if _newclass:bid_volume = _swig_property(_ama.MDFutureSnapshot_bid_volume_get, _ama.MDFutureSnapshot_bid_volume_set)
    __swig_setmethods__["offer_price"] = _ama.MDFutureSnapshot_offer_price_set
    __swig_getmethods__["offer_price"] = _ama.MDFutureSnapshot_offer_price_get
    if _newclass:offer_price = _swig_property(_ama.MDFutureSnapshot_offer_price_get, _ama.MDFutureSnapshot_offer_price_set)
    __swig_setmethods__["offer_volume"] = _ama.MDFutureSnapshot_offer_volume_set
    __swig_getmethods__["offer_volume"] = _ama.MDFutureSnapshot_offer_volume_get
    if _newclass:offer_volume = _swig_property(_ama.MDFutureSnapshot_offer_volume_get, _ama.MDFutureSnapshot_offer_volume_set)
    __swig_setmethods__["average_price"] = _ama.MDFutureSnapshot_average_price_set
    __swig_getmethods__["average_price"] = _ama.MDFutureSnapshot_average_price_get
    if _newclass:average_price = _swig_property(_ama.MDFutureSnapshot_average_price_get, _ama.MDFutureSnapshot_average_price_set)
    def __init__(self): 
        this = _ama.new_MDFutureSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDFutureSnapshot
    __del__ = lambda self : None;
MDFutureSnapshot_swigregister = _ama.MDFutureSnapshot_swigregister
MDFutureSnapshot_swigregister(MDFutureSnapshot)

class MDCSIIndexSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDCSIIndexSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDCSIIndexSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDCSIIndexSnapshot_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDCSIIndexSnapshot_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDCSIIndexSnapshot_market_type_get, _ama.MDCSIIndexSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDCSIIndexSnapshot_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDCSIIndexSnapshot_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDCSIIndexSnapshot_security_code_get, _ama.MDCSIIndexSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = _ama.MDCSIIndexSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = _ama.MDCSIIndexSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(_ama.MDCSIIndexSnapshot_orig_time_get, _ama.MDCSIIndexSnapshot_orig_time_set)
    __swig_setmethods__["last_index"] = _ama.MDCSIIndexSnapshot_last_index_set
    __swig_getmethods__["last_index"] = _ama.MDCSIIndexSnapshot_last_index_get
    if _newclass:last_index = _swig_property(_ama.MDCSIIndexSnapshot_last_index_get, _ama.MDCSIIndexSnapshot_last_index_set)
    __swig_setmethods__["open_index"] = _ama.MDCSIIndexSnapshot_open_index_set
    __swig_getmethods__["open_index"] = _ama.MDCSIIndexSnapshot_open_index_get
    if _newclass:open_index = _swig_property(_ama.MDCSIIndexSnapshot_open_index_get, _ama.MDCSIIndexSnapshot_open_index_set)
    __swig_setmethods__["high_index"] = _ama.MDCSIIndexSnapshot_high_index_set
    __swig_getmethods__["high_index"] = _ama.MDCSIIndexSnapshot_high_index_get
    if _newclass:high_index = _swig_property(_ama.MDCSIIndexSnapshot_high_index_get, _ama.MDCSIIndexSnapshot_high_index_set)
    __swig_setmethods__["low_index"] = _ama.MDCSIIndexSnapshot_low_index_set
    __swig_getmethods__["low_index"] = _ama.MDCSIIndexSnapshot_low_index_get
    if _newclass:low_index = _swig_property(_ama.MDCSIIndexSnapshot_low_index_get, _ama.MDCSIIndexSnapshot_low_index_set)
    __swig_setmethods__["close_index"] = _ama.MDCSIIndexSnapshot_close_index_set
    __swig_getmethods__["close_index"] = _ama.MDCSIIndexSnapshot_close_index_get
    if _newclass:close_index = _swig_property(_ama.MDCSIIndexSnapshot_close_index_get, _ama.MDCSIIndexSnapshot_close_index_set)
    __swig_setmethods__["pre_close_index"] = _ama.MDCSIIndexSnapshot_pre_close_index_set
    __swig_getmethods__["pre_close_index"] = _ama.MDCSIIndexSnapshot_pre_close_index_get
    if _newclass:pre_close_index = _swig_property(_ama.MDCSIIndexSnapshot_pre_close_index_get, _ama.MDCSIIndexSnapshot_pre_close_index_set)
    __swig_setmethods__["change"] = _ama.MDCSIIndexSnapshot_change_set
    __swig_getmethods__["change"] = _ama.MDCSIIndexSnapshot_change_get
    if _newclass:change = _swig_property(_ama.MDCSIIndexSnapshot_change_get, _ama.MDCSIIndexSnapshot_change_set)
    __swig_setmethods__["ratio_of_change"] = _ama.MDCSIIndexSnapshot_ratio_of_change_set
    __swig_getmethods__["ratio_of_change"] = _ama.MDCSIIndexSnapshot_ratio_of_change_get
    if _newclass:ratio_of_change = _swig_property(_ama.MDCSIIndexSnapshot_ratio_of_change_get, _ama.MDCSIIndexSnapshot_ratio_of_change_set)
    __swig_setmethods__["total_volume_trade"] = _ama.MDCSIIndexSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = _ama.MDCSIIndexSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(_ama.MDCSIIndexSnapshot_total_volume_trade_get, _ama.MDCSIIndexSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = _ama.MDCSIIndexSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = _ama.MDCSIIndexSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(_ama.MDCSIIndexSnapshot_total_value_trade_get, _ama.MDCSIIndexSnapshot_total_value_trade_set)
    __swig_setmethods__["exchange_rate"] = _ama.MDCSIIndexSnapshot_exchange_rate_set
    __swig_getmethods__["exchange_rate"] = _ama.MDCSIIndexSnapshot_exchange_rate_get
    if _newclass:exchange_rate = _swig_property(_ama.MDCSIIndexSnapshot_exchange_rate_get, _ama.MDCSIIndexSnapshot_exchange_rate_set)
    __swig_setmethods__["currency_symbol"] = _ama.MDCSIIndexSnapshot_currency_symbol_set
    __swig_getmethods__["currency_symbol"] = _ama.MDCSIIndexSnapshot_currency_symbol_get
    if _newclass:currency_symbol = _swig_property(_ama.MDCSIIndexSnapshot_currency_symbol_get, _ama.MDCSIIndexSnapshot_currency_symbol_set)
    __swig_setmethods__["close_index2"] = _ama.MDCSIIndexSnapshot_close_index2_set
    __swig_getmethods__["close_index2"] = _ama.MDCSIIndexSnapshot_close_index2_get
    if _newclass:close_index2 = _swig_property(_ama.MDCSIIndexSnapshot_close_index2_get, _ama.MDCSIIndexSnapshot_close_index2_set)
    __swig_setmethods__["close_index3"] = _ama.MDCSIIndexSnapshot_close_index3_set
    __swig_getmethods__["close_index3"] = _ama.MDCSIIndexSnapshot_close_index3_get
    if _newclass:close_index3 = _swig_property(_ama.MDCSIIndexSnapshot_close_index3_get, _ama.MDCSIIndexSnapshot_close_index3_set)
    __swig_setmethods__["index_market"] = _ama.MDCSIIndexSnapshot_index_market_set
    __swig_getmethods__["index_market"] = _ama.MDCSIIndexSnapshot_index_market_get
    if _newclass:index_market = _swig_property(_ama.MDCSIIndexSnapshot_index_market_get, _ama.MDCSIIndexSnapshot_index_market_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDCSIIndexSnapshot_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDCSIIndexSnapshot_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDCSIIndexSnapshot_md_stream_id_get, _ama.MDCSIIndexSnapshot_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDCSIIndexSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDCSIIndexSnapshot
    __del__ = lambda self : None;
MDCSIIndexSnapshot_swigregister = _ama.MDCSIIndexSnapshot_swigregister
MDCSIIndexSnapshot_swigregister(MDCSIIndexSnapshot)

class MDIndicatorOfTradingVolumeSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDIndicatorOfTradingVolumeSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDIndicatorOfTradingVolumeSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDIndicatorOfTradingVolumeSnapshot_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDIndicatorOfTradingVolumeSnapshot_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDIndicatorOfTradingVolumeSnapshot_market_type_get, _ama.MDIndicatorOfTradingVolumeSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDIndicatorOfTradingVolumeSnapshot_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDIndicatorOfTradingVolumeSnapshot_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDIndicatorOfTradingVolumeSnapshot_security_code_get, _ama.MDIndicatorOfTradingVolumeSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = _ama.MDIndicatorOfTradingVolumeSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = _ama.MDIndicatorOfTradingVolumeSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(_ama.MDIndicatorOfTradingVolumeSnapshot_orig_time_get, _ama.MDIndicatorOfTradingVolumeSnapshot_orig_time_set)
    __swig_setmethods__["total_volume_trade"] = _ama.MDIndicatorOfTradingVolumeSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = _ama.MDIndicatorOfTradingVolumeSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(_ama.MDIndicatorOfTradingVolumeSnapshot_total_volume_trade_get, _ama.MDIndicatorOfTradingVolumeSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = _ama.MDIndicatorOfTradingVolumeSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = _ama.MDIndicatorOfTradingVolumeSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(_ama.MDIndicatorOfTradingVolumeSnapshot_total_value_trade_get, _ama.MDIndicatorOfTradingVolumeSnapshot_total_value_trade_set)
    __swig_setmethods__["pre_close_price"] = _ama.MDIndicatorOfTradingVolumeSnapshot_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = _ama.MDIndicatorOfTradingVolumeSnapshot_pre_close_price_get
    if _newclass:pre_close_price = _swig_property(_ama.MDIndicatorOfTradingVolumeSnapshot_pre_close_price_get, _ama.MDIndicatorOfTradingVolumeSnapshot_pre_close_price_set)
    __swig_setmethods__["stock_num"] = _ama.MDIndicatorOfTradingVolumeSnapshot_stock_num_set
    __swig_getmethods__["stock_num"] = _ama.MDIndicatorOfTradingVolumeSnapshot_stock_num_get
    if _newclass:stock_num = _swig_property(_ama.MDIndicatorOfTradingVolumeSnapshot_stock_num_get, _ama.MDIndicatorOfTradingVolumeSnapshot_stock_num_set)
    __swig_setmethods__["trading_phase_code"] = _ama.MDIndicatorOfTradingVolumeSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = _ama.MDIndicatorOfTradingVolumeSnapshot_trading_phase_code_get
    if _newclass:trading_phase_code = _swig_property(_ama.MDIndicatorOfTradingVolumeSnapshot_trading_phase_code_get, _ama.MDIndicatorOfTradingVolumeSnapshot_trading_phase_code_set)
    __swig_setmethods__["channel_no"] = _ama.MDIndicatorOfTradingVolumeSnapshot_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDIndicatorOfTradingVolumeSnapshot_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDIndicatorOfTradingVolumeSnapshot_channel_no_get, _ama.MDIndicatorOfTradingVolumeSnapshot_channel_no_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDIndicatorOfTradingVolumeSnapshot_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDIndicatorOfTradingVolumeSnapshot_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDIndicatorOfTradingVolumeSnapshot_md_stream_id_get, _ama.MDIndicatorOfTradingVolumeSnapshot_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDIndicatorOfTradingVolumeSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDIndicatorOfTradingVolumeSnapshot
    __del__ = lambda self : None;
MDIndicatorOfTradingVolumeSnapshot_swigregister = _ama.MDIndicatorOfTradingVolumeSnapshot_swigregister
MDIndicatorOfTradingVolumeSnapshot_swigregister(MDIndicatorOfTradingVolumeSnapshot)

class MDCnIndexSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDCnIndexSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDCnIndexSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDCnIndexSnapshot_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDCnIndexSnapshot_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDCnIndexSnapshot_market_type_get, _ama.MDCnIndexSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDCnIndexSnapshot_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDCnIndexSnapshot_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDCnIndexSnapshot_security_code_get, _ama.MDCnIndexSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = _ama.MDCnIndexSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = _ama.MDCnIndexSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(_ama.MDCnIndexSnapshot_orig_time_get, _ama.MDCnIndexSnapshot_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = _ama.MDCnIndexSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = _ama.MDCnIndexSnapshot_trading_phase_code_get
    if _newclass:trading_phase_code = _swig_property(_ama.MDCnIndexSnapshot_trading_phase_code_get, _ama.MDCnIndexSnapshot_trading_phase_code_set)
    __swig_setmethods__["pre_close_index"] = _ama.MDCnIndexSnapshot_pre_close_index_set
    __swig_getmethods__["pre_close_index"] = _ama.MDCnIndexSnapshot_pre_close_index_get
    if _newclass:pre_close_index = _swig_property(_ama.MDCnIndexSnapshot_pre_close_index_get, _ama.MDCnIndexSnapshot_pre_close_index_set)
    __swig_setmethods__["open_index"] = _ama.MDCnIndexSnapshot_open_index_set
    __swig_getmethods__["open_index"] = _ama.MDCnIndexSnapshot_open_index_get
    if _newclass:open_index = _swig_property(_ama.MDCnIndexSnapshot_open_index_get, _ama.MDCnIndexSnapshot_open_index_set)
    __swig_setmethods__["high_index"] = _ama.MDCnIndexSnapshot_high_index_set
    __swig_getmethods__["high_index"] = _ama.MDCnIndexSnapshot_high_index_get
    if _newclass:high_index = _swig_property(_ama.MDCnIndexSnapshot_high_index_get, _ama.MDCnIndexSnapshot_high_index_set)
    __swig_setmethods__["low_index"] = _ama.MDCnIndexSnapshot_low_index_set
    __swig_getmethods__["low_index"] = _ama.MDCnIndexSnapshot_low_index_get
    if _newclass:low_index = _swig_property(_ama.MDCnIndexSnapshot_low_index_get, _ama.MDCnIndexSnapshot_low_index_set)
    __swig_setmethods__["last_index"] = _ama.MDCnIndexSnapshot_last_index_set
    __swig_getmethods__["last_index"] = _ama.MDCnIndexSnapshot_last_index_get
    if _newclass:last_index = _swig_property(_ama.MDCnIndexSnapshot_last_index_get, _ama.MDCnIndexSnapshot_last_index_set)
    __swig_setmethods__["close_index"] = _ama.MDCnIndexSnapshot_close_index_set
    __swig_getmethods__["close_index"] = _ama.MDCnIndexSnapshot_close_index_get
    if _newclass:close_index = _swig_property(_ama.MDCnIndexSnapshot_close_index_get, _ama.MDCnIndexSnapshot_close_index_set)
    __swig_setmethods__["close_index2"] = _ama.MDCnIndexSnapshot_close_index2_set
    __swig_getmethods__["close_index2"] = _ama.MDCnIndexSnapshot_close_index2_get
    if _newclass:close_index2 = _swig_property(_ama.MDCnIndexSnapshot_close_index2_get, _ama.MDCnIndexSnapshot_close_index2_set)
    __swig_setmethods__["close_index3"] = _ama.MDCnIndexSnapshot_close_index3_set
    __swig_getmethods__["close_index3"] = _ama.MDCnIndexSnapshot_close_index3_get
    if _newclass:close_index3 = _swig_property(_ama.MDCnIndexSnapshot_close_index3_get, _ama.MDCnIndexSnapshot_close_index3_set)
    __swig_setmethods__["total_volume_trade"] = _ama.MDCnIndexSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = _ama.MDCnIndexSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(_ama.MDCnIndexSnapshot_total_volume_trade_get, _ama.MDCnIndexSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = _ama.MDCnIndexSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = _ama.MDCnIndexSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(_ama.MDCnIndexSnapshot_total_value_trade_get, _ama.MDCnIndexSnapshot_total_value_trade_set)
    __swig_setmethods__["channel_no"] = _ama.MDCnIndexSnapshot_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDCnIndexSnapshot_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDCnIndexSnapshot_channel_no_get, _ama.MDCnIndexSnapshot_channel_no_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDCnIndexSnapshot_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDCnIndexSnapshot_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDCnIndexSnapshot_md_stream_id_get, _ama.MDCnIndexSnapshot_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDCnIndexSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDCnIndexSnapshot
    __del__ = lambda self : None;
MDCnIndexSnapshot_swigregister = _ama.MDCnIndexSnapshot_swigregister
MDCnIndexSnapshot_swigregister(MDCnIndexSnapshot)

class MDRefinancingTickOrder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDRefinancingTickOrder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDRefinancingTickOrder, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDRefinancingTickOrder_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDRefinancingTickOrder_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDRefinancingTickOrder_market_type_get, _ama.MDRefinancingTickOrder_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDRefinancingTickOrder_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDRefinancingTickOrder_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDRefinancingTickOrder_security_code_get, _ama.MDRefinancingTickOrder_security_code_set)
    __swig_setmethods__["channel_no"] = _ama.MDRefinancingTickOrder_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDRefinancingTickOrder_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDRefinancingTickOrder_channel_no_get, _ama.MDRefinancingTickOrder_channel_no_set)
    __swig_setmethods__["appl_seq_num"] = _ama.MDRefinancingTickOrder_appl_seq_num_set
    __swig_getmethods__["appl_seq_num"] = _ama.MDRefinancingTickOrder_appl_seq_num_get
    if _newclass:appl_seq_num = _swig_property(_ama.MDRefinancingTickOrder_appl_seq_num_get, _ama.MDRefinancingTickOrder_appl_seq_num_set)
    __swig_setmethods__["order_time"] = _ama.MDRefinancingTickOrder_order_time_set
    __swig_getmethods__["order_time"] = _ama.MDRefinancingTickOrder_order_time_get
    if _newclass:order_time = _swig_property(_ama.MDRefinancingTickOrder_order_time_get, _ama.MDRefinancingTickOrder_order_time_set)
    __swig_setmethods__["order_price"] = _ama.MDRefinancingTickOrder_order_price_set
    __swig_getmethods__["order_price"] = _ama.MDRefinancingTickOrder_order_price_get
    if _newclass:order_price = _swig_property(_ama.MDRefinancingTickOrder_order_price_get, _ama.MDRefinancingTickOrder_order_price_set)
    __swig_setmethods__["order_volume"] = _ama.MDRefinancingTickOrder_order_volume_set
    __swig_getmethods__["order_volume"] = _ama.MDRefinancingTickOrder_order_volume_get
    if _newclass:order_volume = _swig_property(_ama.MDRefinancingTickOrder_order_volume_get, _ama.MDRefinancingTickOrder_order_volume_set)
    __swig_setmethods__["side"] = _ama.MDRefinancingTickOrder_side_set
    __swig_getmethods__["side"] = _ama.MDRefinancingTickOrder_side_get
    if _newclass:side = _swig_property(_ama.MDRefinancingTickOrder_side_get, _ama.MDRefinancingTickOrder_side_set)
    __swig_setmethods__["expiration_days"] = _ama.MDRefinancingTickOrder_expiration_days_set
    __swig_getmethods__["expiration_days"] = _ama.MDRefinancingTickOrder_expiration_days_get
    if _newclass:expiration_days = _swig_property(_ama.MDRefinancingTickOrder_expiration_days_get, _ama.MDRefinancingTickOrder_expiration_days_set)
    __swig_setmethods__["expiration_type"] = _ama.MDRefinancingTickOrder_expiration_type_set
    __swig_getmethods__["expiration_type"] = _ama.MDRefinancingTickOrder_expiration_type_get
    if _newclass:expiration_type = _swig_property(_ama.MDRefinancingTickOrder_expiration_type_get, _ama.MDRefinancingTickOrder_expiration_type_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDRefinancingTickOrder_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDRefinancingTickOrder_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDRefinancingTickOrder_md_stream_id_get, _ama.MDRefinancingTickOrder_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDRefinancingTickOrder()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDRefinancingTickOrder
    __del__ = lambda self : None;
MDRefinancingTickOrder_swigregister = _ama.MDRefinancingTickOrder_swigregister
MDRefinancingTickOrder_swigregister(MDRefinancingTickOrder)

class MDRefinancingTickExecution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDRefinancingTickExecution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDRefinancingTickExecution, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDRefinancingTickExecution_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDRefinancingTickExecution_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDRefinancingTickExecution_market_type_get, _ama.MDRefinancingTickExecution_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDRefinancingTickExecution_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDRefinancingTickExecution_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDRefinancingTickExecution_security_code_get, _ama.MDRefinancingTickExecution_security_code_set)
    __swig_setmethods__["exec_time"] = _ama.MDRefinancingTickExecution_exec_time_set
    __swig_getmethods__["exec_time"] = _ama.MDRefinancingTickExecution_exec_time_get
    if _newclass:exec_time = _swig_property(_ama.MDRefinancingTickExecution_exec_time_get, _ama.MDRefinancingTickExecution_exec_time_set)
    __swig_setmethods__["channel_no"] = _ama.MDRefinancingTickExecution_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDRefinancingTickExecution_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDRefinancingTickExecution_channel_no_get, _ama.MDRefinancingTickExecution_channel_no_set)
    __swig_setmethods__["appl_seq_num"] = _ama.MDRefinancingTickExecution_appl_seq_num_set
    __swig_getmethods__["appl_seq_num"] = _ama.MDRefinancingTickExecution_appl_seq_num_get
    if _newclass:appl_seq_num = _swig_property(_ama.MDRefinancingTickExecution_appl_seq_num_get, _ama.MDRefinancingTickExecution_appl_seq_num_set)
    __swig_setmethods__["exec_price"] = _ama.MDRefinancingTickExecution_exec_price_set
    __swig_getmethods__["exec_price"] = _ama.MDRefinancingTickExecution_exec_price_get
    if _newclass:exec_price = _swig_property(_ama.MDRefinancingTickExecution_exec_price_get, _ama.MDRefinancingTickExecution_exec_price_set)
    __swig_setmethods__["exec_volume"] = _ama.MDRefinancingTickExecution_exec_volume_set
    __swig_getmethods__["exec_volume"] = _ama.MDRefinancingTickExecution_exec_volume_get
    if _newclass:exec_volume = _swig_property(_ama.MDRefinancingTickExecution_exec_volume_get, _ama.MDRefinancingTickExecution_exec_volume_set)
    __swig_setmethods__["value_trade"] = _ama.MDRefinancingTickExecution_value_trade_set
    __swig_getmethods__["value_trade"] = _ama.MDRefinancingTickExecution_value_trade_get
    if _newclass:value_trade = _swig_property(_ama.MDRefinancingTickExecution_value_trade_get, _ama.MDRefinancingTickExecution_value_trade_set)
    __swig_setmethods__["bid_appl_seq_num"] = _ama.MDRefinancingTickExecution_bid_appl_seq_num_set
    __swig_getmethods__["bid_appl_seq_num"] = _ama.MDRefinancingTickExecution_bid_appl_seq_num_get
    if _newclass:bid_appl_seq_num = _swig_property(_ama.MDRefinancingTickExecution_bid_appl_seq_num_get, _ama.MDRefinancingTickExecution_bid_appl_seq_num_set)
    __swig_setmethods__["offer_appl_seq_num"] = _ama.MDRefinancingTickExecution_offer_appl_seq_num_set
    __swig_getmethods__["offer_appl_seq_num"] = _ama.MDRefinancingTickExecution_offer_appl_seq_num_get
    if _newclass:offer_appl_seq_num = _swig_property(_ama.MDRefinancingTickExecution_offer_appl_seq_num_get, _ama.MDRefinancingTickExecution_offer_appl_seq_num_set)
    __swig_setmethods__["side"] = _ama.MDRefinancingTickExecution_side_set
    __swig_getmethods__["side"] = _ama.MDRefinancingTickExecution_side_get
    if _newclass:side = _swig_property(_ama.MDRefinancingTickExecution_side_get, _ama.MDRefinancingTickExecution_side_set)
    __swig_setmethods__["exec_type"] = _ama.MDRefinancingTickExecution_exec_type_set
    __swig_getmethods__["exec_type"] = _ama.MDRefinancingTickExecution_exec_type_get
    if _newclass:exec_type = _swig_property(_ama.MDRefinancingTickExecution_exec_type_get, _ama.MDRefinancingTickExecution_exec_type_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDRefinancingTickExecution_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDRefinancingTickExecution_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDRefinancingTickExecution_md_stream_id_get, _ama.MDRefinancingTickExecution_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDRefinancingTickExecution()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDRefinancingTickExecution
    __del__ = lambda self : None;
MDRefinancingTickExecution_swigregister = _ama.MDRefinancingTickExecution_swigregister
MDRefinancingTickExecution_swigregister(MDRefinancingTickExecution)

class MDNegotiableTickOrder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDNegotiableTickOrder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDNegotiableTickOrder, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDNegotiableTickOrder_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDNegotiableTickOrder_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDNegotiableTickOrder_market_type_get, _ama.MDNegotiableTickOrder_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDNegotiableTickOrder_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDNegotiableTickOrder_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDNegotiableTickOrder_security_code_get, _ama.MDNegotiableTickOrder_security_code_set)
    __swig_setmethods__["channel_no"] = _ama.MDNegotiableTickOrder_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDNegotiableTickOrder_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDNegotiableTickOrder_channel_no_get, _ama.MDNegotiableTickOrder_channel_no_set)
    __swig_setmethods__["appl_seq_num"] = _ama.MDNegotiableTickOrder_appl_seq_num_set
    __swig_getmethods__["appl_seq_num"] = _ama.MDNegotiableTickOrder_appl_seq_num_get
    if _newclass:appl_seq_num = _swig_property(_ama.MDNegotiableTickOrder_appl_seq_num_get, _ama.MDNegotiableTickOrder_appl_seq_num_set)
    __swig_setmethods__["order_time"] = _ama.MDNegotiableTickOrder_order_time_set
    __swig_getmethods__["order_time"] = _ama.MDNegotiableTickOrder_order_time_get
    if _newclass:order_time = _swig_property(_ama.MDNegotiableTickOrder_order_time_get, _ama.MDNegotiableTickOrder_order_time_set)
    __swig_setmethods__["order_price"] = _ama.MDNegotiableTickOrder_order_price_set
    __swig_getmethods__["order_price"] = _ama.MDNegotiableTickOrder_order_price_get
    if _newclass:order_price = _swig_property(_ama.MDNegotiableTickOrder_order_price_get, _ama.MDNegotiableTickOrder_order_price_set)
    __swig_setmethods__["order_volume"] = _ama.MDNegotiableTickOrder_order_volume_set
    __swig_getmethods__["order_volume"] = _ama.MDNegotiableTickOrder_order_volume_get
    if _newclass:order_volume = _swig_property(_ama.MDNegotiableTickOrder_order_volume_get, _ama.MDNegotiableTickOrder_order_volume_set)
    __swig_setmethods__["side"] = _ama.MDNegotiableTickOrder_side_set
    __swig_getmethods__["side"] = _ama.MDNegotiableTickOrder_side_get
    if _newclass:side = _swig_property(_ama.MDNegotiableTickOrder_side_get, _ama.MDNegotiableTickOrder_side_set)
    __swig_setmethods__["confirm_id"] = _ama.MDNegotiableTickOrder_confirm_id_set
    __swig_getmethods__["confirm_id"] = _ama.MDNegotiableTickOrder_confirm_id_get
    if _newclass:confirm_id = _swig_property(_ama.MDNegotiableTickOrder_confirm_id_get, _ama.MDNegotiableTickOrder_confirm_id_set)
    __swig_setmethods__["contactor"] = _ama.MDNegotiableTickOrder_contactor_set
    __swig_getmethods__["contactor"] = _ama.MDNegotiableTickOrder_contactor_get
    if _newclass:contactor = _swig_property(_ama.MDNegotiableTickOrder_contactor_get, _ama.MDNegotiableTickOrder_contactor_set)
    __swig_setmethods__["contact_info"] = _ama.MDNegotiableTickOrder_contact_info_set
    __swig_getmethods__["contact_info"] = _ama.MDNegotiableTickOrder_contact_info_get
    if _newclass:contact_info = _swig_property(_ama.MDNegotiableTickOrder_contact_info_get, _ama.MDNegotiableTickOrder_contact_info_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDNegotiableTickOrder_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDNegotiableTickOrder_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDNegotiableTickOrder_md_stream_id_get, _ama.MDNegotiableTickOrder_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDNegotiableTickOrder()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDNegotiableTickOrder
    __del__ = lambda self : None;
MDNegotiableTickOrder_swigregister = _ama.MDNegotiableTickOrder_swigregister
MDNegotiableTickOrder_swigregister(MDNegotiableTickOrder)

class MDNegotiableTickExecution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDNegotiableTickExecution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDNegotiableTickExecution, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDNegotiableTickExecution_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDNegotiableTickExecution_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDNegotiableTickExecution_market_type_get, _ama.MDNegotiableTickExecution_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDNegotiableTickExecution_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDNegotiableTickExecution_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDNegotiableTickExecution_security_code_get, _ama.MDNegotiableTickExecution_security_code_set)
    __swig_setmethods__["exec_time"] = _ama.MDNegotiableTickExecution_exec_time_set
    __swig_getmethods__["exec_time"] = _ama.MDNegotiableTickExecution_exec_time_get
    if _newclass:exec_time = _swig_property(_ama.MDNegotiableTickExecution_exec_time_get, _ama.MDNegotiableTickExecution_exec_time_set)
    __swig_setmethods__["channel_no"] = _ama.MDNegotiableTickExecution_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDNegotiableTickExecution_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDNegotiableTickExecution_channel_no_get, _ama.MDNegotiableTickExecution_channel_no_set)
    __swig_setmethods__["appl_seq_num"] = _ama.MDNegotiableTickExecution_appl_seq_num_set
    __swig_getmethods__["appl_seq_num"] = _ama.MDNegotiableTickExecution_appl_seq_num_get
    if _newclass:appl_seq_num = _swig_property(_ama.MDNegotiableTickExecution_appl_seq_num_get, _ama.MDNegotiableTickExecution_appl_seq_num_set)
    __swig_setmethods__["exec_price"] = _ama.MDNegotiableTickExecution_exec_price_set
    __swig_getmethods__["exec_price"] = _ama.MDNegotiableTickExecution_exec_price_get
    if _newclass:exec_price = _swig_property(_ama.MDNegotiableTickExecution_exec_price_get, _ama.MDNegotiableTickExecution_exec_price_set)
    __swig_setmethods__["exec_volume"] = _ama.MDNegotiableTickExecution_exec_volume_set
    __swig_getmethods__["exec_volume"] = _ama.MDNegotiableTickExecution_exec_volume_get
    if _newclass:exec_volume = _swig_property(_ama.MDNegotiableTickExecution_exec_volume_get, _ama.MDNegotiableTickExecution_exec_volume_set)
    __swig_setmethods__["value_trade"] = _ama.MDNegotiableTickExecution_value_trade_set
    __swig_getmethods__["value_trade"] = _ama.MDNegotiableTickExecution_value_trade_get
    if _newclass:value_trade = _swig_property(_ama.MDNegotiableTickExecution_value_trade_get, _ama.MDNegotiableTickExecution_value_trade_set)
    __swig_setmethods__["bid_appl_seq_num"] = _ama.MDNegotiableTickExecution_bid_appl_seq_num_set
    __swig_getmethods__["bid_appl_seq_num"] = _ama.MDNegotiableTickExecution_bid_appl_seq_num_get
    if _newclass:bid_appl_seq_num = _swig_property(_ama.MDNegotiableTickExecution_bid_appl_seq_num_get, _ama.MDNegotiableTickExecution_bid_appl_seq_num_set)
    __swig_setmethods__["offer_appl_seq_num"] = _ama.MDNegotiableTickExecution_offer_appl_seq_num_set
    __swig_getmethods__["offer_appl_seq_num"] = _ama.MDNegotiableTickExecution_offer_appl_seq_num_get
    if _newclass:offer_appl_seq_num = _swig_property(_ama.MDNegotiableTickExecution_offer_appl_seq_num_get, _ama.MDNegotiableTickExecution_offer_appl_seq_num_set)
    __swig_setmethods__["side"] = _ama.MDNegotiableTickExecution_side_set
    __swig_getmethods__["side"] = _ama.MDNegotiableTickExecution_side_get
    if _newclass:side = _swig_property(_ama.MDNegotiableTickExecution_side_get, _ama.MDNegotiableTickExecution_side_set)
    __swig_setmethods__["exec_type"] = _ama.MDNegotiableTickExecution_exec_type_set
    __swig_getmethods__["exec_type"] = _ama.MDNegotiableTickExecution_exec_type_get
    if _newclass:exec_type = _swig_property(_ama.MDNegotiableTickExecution_exec_type_get, _ama.MDNegotiableTickExecution_exec_type_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDNegotiableTickExecution_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDNegotiableTickExecution_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDNegotiableTickExecution_md_stream_id_get, _ama.MDNegotiableTickExecution_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDNegotiableTickExecution()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDNegotiableTickExecution
    __del__ = lambda self : None;
MDNegotiableTickExecution_swigregister = _ama.MDNegotiableTickExecution_swigregister
MDNegotiableTickExecution_swigregister(MDNegotiableTickExecution)

class MDHKTRealtimeLimit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDHKTRealtimeLimit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDHKTRealtimeLimit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDHKTRealtimeLimit_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDHKTRealtimeLimit_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDHKTRealtimeLimit_market_type_get, _ama.MDHKTRealtimeLimit_market_type_set)
    __swig_setmethods__["orig_time"] = _ama.MDHKTRealtimeLimit_orig_time_set
    __swig_getmethods__["orig_time"] = _ama.MDHKTRealtimeLimit_orig_time_get
    if _newclass:orig_time = _swig_property(_ama.MDHKTRealtimeLimit_orig_time_get, _ama.MDHKTRealtimeLimit_orig_time_set)
    __swig_setmethods__["threshold_amount"] = _ama.MDHKTRealtimeLimit_threshold_amount_set
    __swig_getmethods__["threshold_amount"] = _ama.MDHKTRealtimeLimit_threshold_amount_get
    if _newclass:threshold_amount = _swig_property(_ama.MDHKTRealtimeLimit_threshold_amount_get, _ama.MDHKTRealtimeLimit_threshold_amount_set)
    __swig_setmethods__["pos_amt"] = _ama.MDHKTRealtimeLimit_pos_amt_set
    __swig_getmethods__["pos_amt"] = _ama.MDHKTRealtimeLimit_pos_amt_get
    if _newclass:pos_amt = _swig_property(_ama.MDHKTRealtimeLimit_pos_amt_get, _ama.MDHKTRealtimeLimit_pos_amt_set)
    __swig_setmethods__["amount_status"] = _ama.MDHKTRealtimeLimit_amount_status_set
    __swig_getmethods__["amount_status"] = _ama.MDHKTRealtimeLimit_amount_status_get
    if _newclass:amount_status = _swig_property(_ama.MDHKTRealtimeLimit_amount_status_get, _ama.MDHKTRealtimeLimit_amount_status_set)
    __swig_setmethods__["channel_no"] = _ama.MDHKTRealtimeLimit_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDHKTRealtimeLimit_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDHKTRealtimeLimit_channel_no_get, _ama.MDHKTRealtimeLimit_channel_no_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDHKTRealtimeLimit_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDHKTRealtimeLimit_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDHKTRealtimeLimit_md_stream_id_get, _ama.MDHKTRealtimeLimit_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDHKTRealtimeLimit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDHKTRealtimeLimit
    __del__ = lambda self : None;
MDHKTRealtimeLimit_swigregister = _ama.MDHKTRealtimeLimit_swigregister
MDHKTRealtimeLimit_swigregister(MDHKTRealtimeLimit)

class MDHKTProductStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDHKTProductStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDHKTProductStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDHKTProductStatus_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDHKTProductStatus_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDHKTProductStatus_market_type_get, _ama.MDHKTProductStatus_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDHKTProductStatus_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDHKTProductStatus_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDHKTProductStatus_security_code_get, _ama.MDHKTProductStatus_security_code_set)
    __swig_setmethods__["orig_time"] = _ama.MDHKTProductStatus_orig_time_set
    __swig_getmethods__["orig_time"] = _ama.MDHKTProductStatus_orig_time_get
    if _newclass:orig_time = _swig_property(_ama.MDHKTProductStatus_orig_time_get, _ama.MDHKTProductStatus_orig_time_set)
    __swig_setmethods__["trading_status1"] = _ama.MDHKTProductStatus_trading_status1_set
    __swig_getmethods__["trading_status1"] = _ama.MDHKTProductStatus_trading_status1_get
    if _newclass:trading_status1 = _swig_property(_ama.MDHKTProductStatus_trading_status1_get, _ama.MDHKTProductStatus_trading_status1_set)
    __swig_setmethods__["trading_status2"] = _ama.MDHKTProductStatus_trading_status2_set
    __swig_getmethods__["trading_status2"] = _ama.MDHKTProductStatus_trading_status2_get
    if _newclass:trading_status2 = _swig_property(_ama.MDHKTProductStatus_trading_status2_get, _ama.MDHKTProductStatus_trading_status2_set)
    __swig_setmethods__["channel_no"] = _ama.MDHKTProductStatus_channel_no_set
    __swig_getmethods__["channel_no"] = _ama.MDHKTProductStatus_channel_no_get
    if _newclass:channel_no = _swig_property(_ama.MDHKTProductStatus_channel_no_get, _ama.MDHKTProductStatus_channel_no_set)
    __swig_setmethods__["md_stream_id"] = _ama.MDHKTProductStatus_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = _ama.MDHKTProductStatus_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(_ama.MDHKTProductStatus_md_stream_id_get, _ama.MDHKTProductStatus_md_stream_id_set)
    def __init__(self): 
        this = _ama.new_MDHKTProductStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDHKTProductStatus
    __del__ = lambda self : None;
MDHKTProductStatus_swigregister = _ama.MDHKTProductStatus_swigregister
MDHKTProductStatus_swigregister(MDHKTProductStatus)

class MDNEEQSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDNEEQSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDNEEQSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = _ama.MDNEEQSnapshot_market_type_set
    __swig_getmethods__["market_type"] = _ama.MDNEEQSnapshot_market_type_get
    if _newclass:market_type = _swig_property(_ama.MDNEEQSnapshot_market_type_get, _ama.MDNEEQSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = _ama.MDNEEQSnapshot_security_code_set
    __swig_getmethods__["security_code"] = _ama.MDNEEQSnapshot_security_code_get
    if _newclass:security_code = _swig_property(_ama.MDNEEQSnapshot_security_code_get, _ama.MDNEEQSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = _ama.MDNEEQSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = _ama.MDNEEQSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(_ama.MDNEEQSnapshot_orig_time_get, _ama.MDNEEQSnapshot_orig_time_set)
    __swig_setmethods__["pre_close_price"] = _ama.MDNEEQSnapshot_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = _ama.MDNEEQSnapshot_pre_close_price_get
    if _newclass:pre_close_price = _swig_property(_ama.MDNEEQSnapshot_pre_close_price_get, _ama.MDNEEQSnapshot_pre_close_price_set)
    __swig_setmethods__["open_price"] = _ama.MDNEEQSnapshot_open_price_set
    __swig_getmethods__["open_price"] = _ama.MDNEEQSnapshot_open_price_get
    if _newclass:open_price = _swig_property(_ama.MDNEEQSnapshot_open_price_get, _ama.MDNEEQSnapshot_open_price_set)
    __swig_setmethods__["last_price"] = _ama.MDNEEQSnapshot_last_price_set
    __swig_getmethods__["last_price"] = _ama.MDNEEQSnapshot_last_price_get
    if _newclass:last_price = _swig_property(_ama.MDNEEQSnapshot_last_price_get, _ama.MDNEEQSnapshot_last_price_set)
    __swig_setmethods__["total_volume_trade"] = _ama.MDNEEQSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = _ama.MDNEEQSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(_ama.MDNEEQSnapshot_total_volume_trade_get, _ama.MDNEEQSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = _ama.MDNEEQSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = _ama.MDNEEQSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(_ama.MDNEEQSnapshot_total_value_trade_get, _ama.MDNEEQSnapshot_total_value_trade_set)
    __swig_setmethods__["num_trades"] = _ama.MDNEEQSnapshot_num_trades_set
    __swig_getmethods__["num_trades"] = _ama.MDNEEQSnapshot_num_trades_get
    if _newclass:num_trades = _swig_property(_ama.MDNEEQSnapshot_num_trades_get, _ama.MDNEEQSnapshot_num_trades_set)
    __swig_setmethods__["high_price"] = _ama.MDNEEQSnapshot_high_price_set
    __swig_getmethods__["high_price"] = _ama.MDNEEQSnapshot_high_price_get
    if _newclass:high_price = _swig_property(_ama.MDNEEQSnapshot_high_price_get, _ama.MDNEEQSnapshot_high_price_set)
    __swig_setmethods__["low_price"] = _ama.MDNEEQSnapshot_low_price_set
    __swig_getmethods__["low_price"] = _ama.MDNEEQSnapshot_low_price_get
    if _newclass:low_price = _swig_property(_ama.MDNEEQSnapshot_low_price_get, _ama.MDNEEQSnapshot_low_price_set)
    __swig_setmethods__["price_earning_ratio1"] = _ama.MDNEEQSnapshot_price_earning_ratio1_set
    __swig_getmethods__["price_earning_ratio1"] = _ama.MDNEEQSnapshot_price_earning_ratio1_get
    if _newclass:price_earning_ratio1 = _swig_property(_ama.MDNEEQSnapshot_price_earning_ratio1_get, _ama.MDNEEQSnapshot_price_earning_ratio1_set)
    __swig_setmethods__["price_earning_ratio2"] = _ama.MDNEEQSnapshot_price_earning_ratio2_set
    __swig_getmethods__["price_earning_ratio2"] = _ama.MDNEEQSnapshot_price_earning_ratio2_get
    if _newclass:price_earning_ratio2 = _swig_property(_ama.MDNEEQSnapshot_price_earning_ratio2_get, _ama.MDNEEQSnapshot_price_earning_ratio2_set)
    __swig_setmethods__["change1"] = _ama.MDNEEQSnapshot_change1_set
    __swig_getmethods__["change1"] = _ama.MDNEEQSnapshot_change1_get
    if _newclass:change1 = _swig_property(_ama.MDNEEQSnapshot_change1_get, _ama.MDNEEQSnapshot_change1_set)
    __swig_setmethods__["change2"] = _ama.MDNEEQSnapshot_change2_set
    __swig_getmethods__["change2"] = _ama.MDNEEQSnapshot_change2_get
    if _newclass:change2 = _swig_property(_ama.MDNEEQSnapshot_change2_get, _ama.MDNEEQSnapshot_change2_set)
    __swig_setmethods__["open_interest"] = _ama.MDNEEQSnapshot_open_interest_set
    __swig_getmethods__["open_interest"] = _ama.MDNEEQSnapshot_open_interest_get
    if _newclass:open_interest = _swig_property(_ama.MDNEEQSnapshot_open_interest_get, _ama.MDNEEQSnapshot_open_interest_set)
    __swig_setmethods__["bid_price"] = _ama.MDNEEQSnapshot_bid_price_set
    __swig_getmethods__["bid_price"] = _ama.MDNEEQSnapshot_bid_price_get
    if _newclass:bid_price = _swig_property(_ama.MDNEEQSnapshot_bid_price_get, _ama.MDNEEQSnapshot_bid_price_set)
    __swig_setmethods__["bid_volume"] = _ama.MDNEEQSnapshot_bid_volume_set
    __swig_getmethods__["bid_volume"] = _ama.MDNEEQSnapshot_bid_volume_get
    if _newclass:bid_volume = _swig_property(_ama.MDNEEQSnapshot_bid_volume_get, _ama.MDNEEQSnapshot_bid_volume_set)
    __swig_setmethods__["offer_price"] = _ama.MDNEEQSnapshot_offer_price_set
    __swig_getmethods__["offer_price"] = _ama.MDNEEQSnapshot_offer_price_get
    if _newclass:offer_price = _swig_property(_ama.MDNEEQSnapshot_offer_price_get, _ama.MDNEEQSnapshot_offer_price_set)
    __swig_setmethods__["offer_volume"] = _ama.MDNEEQSnapshot_offer_volume_set
    __swig_getmethods__["offer_volume"] = _ama.MDNEEQSnapshot_offer_volume_get
    if _newclass:offer_volume = _swig_property(_ama.MDNEEQSnapshot_offer_volume_get, _ama.MDNEEQSnapshot_offer_volume_set)
    def __init__(self): 
        this = _ama.new_MDNEEQSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_MDNEEQSnapshot
    __del__ = lambda self : None;
MDNEEQSnapshot_swigregister = _ama.MDNEEQSnapshot_swigregister
MDNEEQSnapshot_swigregister(MDNEEQSnapshot)

class Tools(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tools, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tools, name)
    __repr__ = _swig_repr
    __swig_getmethods__["SetUMSServers"] = lambda x: _ama.Tools_SetUMSServers
    if _newclass:SetUMSServers = staticmethod(_ama.Tools_SetUMSServers)
    __swig_getmethods__["GetUMSServers"] = lambda x: _ama.Tools_GetUMSServers
    if _newclass:GetUMSServers = staticmethod(_ama.Tools_GetUMSServers)
    __swig_getmethods__["CreateSubscribeItem"] = lambda x: _ama.Tools_CreateSubscribeItem
    if _newclass:CreateSubscribeItem = staticmethod(_ama.Tools_CreateSubscribeItem)
    __swig_getmethods__["DestroySubscribeItem"] = lambda x: _ama.Tools_DestroySubscribeItem
    if _newclass:DestroySubscribeItem = staticmethod(_ama.Tools_DestroySubscribeItem)
    __swig_getmethods__["SetSubscribeItem"] = lambda x: _ama.Tools_SetSubscribeItem
    if _newclass:SetSubscribeItem = staticmethod(_ama.Tools_SetSubscribeItem)
    __swig_getmethods__["GetDataByIndex"] = lambda x: _ama.Tools_GetDataByIndex
    if _newclass:GetDataByIndex = staticmethod(_ama.Tools_GetDataByIndex)
    __swig_getmethods__["GetInt64DataByIndex"] = lambda x: _ama.Tools_GetInt64DataByIndex
    if _newclass:GetInt64DataByIndex = staticmethod(_ama.Tools_GetInt64DataByIndex)
    __swig_getmethods__["Serialize"] = lambda x: _ama.Tools_Serialize
    if _newclass:Serialize = staticmethod(_ama.Tools_Serialize)
    __swig_getmethods__["FreeMemory"] = lambda x: _ama.Tools_FreeMemory
    if _newclass:FreeMemory = staticmethod(_ama.Tools_FreeMemory)
    __swig_getmethods__["GetEventLevelString"] = lambda x: _ama.Tools_GetEventLevelString
    if _newclass:GetEventLevelString = staticmethod(_ama.Tools_GetEventLevelString)
    __swig_getmethods__["GetEventCodeString"] = lambda x: _ama.Tools_GetEventCodeString
    if _newclass:GetEventCodeString = staticmethod(_ama.Tools_GetEventCodeString)
    def __init__(self): 
        this = _ama.new_Tools()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_Tools
    __del__ = lambda self : None;
Tools_swigregister = _ama.Tools_swigregister
Tools_swigregister(Tools)

def Tools_SetUMSServers(*args):
  return _ama.Tools_SetUMSServers(*args)
Tools_SetUMSServers = _ama.Tools_SetUMSServers

def Tools_GetUMSServers(*args):
  return _ama.Tools_GetUMSServers(*args)
Tools_GetUMSServers = _ama.Tools_GetUMSServers

def Tools_CreateSubscribeItem(*args):
  return _ama.Tools_CreateSubscribeItem(*args)
Tools_CreateSubscribeItem = _ama.Tools_CreateSubscribeItem

def Tools_DestroySubscribeItem(*args):
  return _ama.Tools_DestroySubscribeItem(*args)
Tools_DestroySubscribeItem = _ama.Tools_DestroySubscribeItem

def Tools_SetSubscribeItem(*args):
  return _ama.Tools_SetSubscribeItem(*args)
Tools_SetSubscribeItem = _ama.Tools_SetSubscribeItem

def Tools_GetDataByIndex(*args):
  return _ama.Tools_GetDataByIndex(*args)
Tools_GetDataByIndex = _ama.Tools_GetDataByIndex

def Tools_GetInt64DataByIndex(*args):
  return _ama.Tools_GetInt64DataByIndex(*args)
Tools_GetInt64DataByIndex = _ama.Tools_GetInt64DataByIndex

def Tools_Serialize(*args):
  return _ama.Tools_Serialize(*args)
Tools_Serialize = _ama.Tools_Serialize

def Tools_FreeMemory(*args):
  return _ama.Tools_FreeMemory(*args)
Tools_FreeMemory = _ama.Tools_FreeMemory

def Tools_GetEventLevelString(*args):
  return _ama.Tools_GetEventLevelString(*args)
Tools_GetEventLevelString = _ama.Tools_GetEventLevelString

def Tools_GetEventCodeString(*args):
  return _ama.Tools_GetEventCodeString(*args)
Tools_GetEventCodeString = _ama.Tools_GetEventCodeString

class IAMDApi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAMDApi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAMDApi, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetVersion"] = lambda x: _ama.IAMDApi_GetVersion
    if _newclass:GetVersion = staticmethod(_ama.IAMDApi_GetVersion)
    __swig_getmethods__["Init"] = lambda x: _ama.IAMDApi_Init
    if _newclass:Init = staticmethod(_ama.IAMDApi_Init)
    __swig_getmethods__["Join"] = lambda x: _ama.IAMDApi_Join
    if _newclass:Join = staticmethod(_ama.IAMDApi_Join)
    __swig_getmethods__["Release"] = lambda x: _ama.IAMDApi_Release
    if _newclass:Release = staticmethod(_ama.IAMDApi_Release)
    __swig_getmethods__["FreeMemory"] = lambda x: _ama.IAMDApi_FreeMemory
    if _newclass:FreeMemory = staticmethod(_ama.IAMDApi_FreeMemory)
    __swig_getmethods__["SubscribeData"] = lambda x: _ama.IAMDApi_SubscribeData
    if _newclass:SubscribeData = staticmethod(_ama.IAMDApi_SubscribeData)
    def __init__(self): 
        this = _ama.new_IAMDApi()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ama.delete_IAMDApi
    __del__ = lambda self : None;
IAMDApi_swigregister = _ama.IAMDApi_swigregister
IAMDApi_swigregister(IAMDApi)

def IAMDApi_GetVersion():
  return _ama.IAMDApi_GetVersion()
IAMDApi_GetVersion = _ama.IAMDApi_GetVersion

def IAMDApi_Init(*args):
  return _ama.IAMDApi_Init(*args)
IAMDApi_Init = _ama.IAMDApi_Init

def IAMDApi_Join():
  return _ama.IAMDApi_Join()
IAMDApi_Join = _ama.IAMDApi_Join

def IAMDApi_Release():
  return _ama.IAMDApi_Release()
IAMDApi_Release = _ama.IAMDApi_Release

def IAMDApi_FreeMemory(*args):
  return _ama.IAMDApi_FreeMemory(*args)
IAMDApi_FreeMemory = _ama.IAMDApi_FreeMemory

def IAMDApi_SubscribeData(*args):
  return _ama.IAMDApi_SubscribeData(*args)
IAMDApi_SubscribeData = _ama.IAMDApi_SubscribeData

class IAMDSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAMDSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAMDSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ama.delete_IAMDSpi
    __del__ = lambda self : None;
    def OnLog(self, *args): return _ama.IAMDSpi_OnLog(self, *args)
    def OnIndicator(self, *args): return _ama.IAMDSpi_OnIndicator(self, *args)
    def OnEvent(self, *args): return _ama.IAMDSpi_OnEvent(self, *args)
    def OnMDSnapshot(self, *args): return _ama.IAMDSpi_OnMDSnapshot(self, *args)
    def OnMDOptionSnapshot(self, *args): return _ama.IAMDSpi_OnMDOptionSnapshot(self, *args)
    def OnMDHKTSnapshot(self, *args): return _ama.IAMDSpi_OnMDHKTSnapshot(self, *args)
    def OnMDIndexSnapshot(self, *args): return _ama.IAMDSpi_OnMDIndexSnapshot(self, *args)
    def OnMDTickOrder(self, *args): return _ama.IAMDSpi_OnMDTickOrder(self, *args)
    def OnMDTickExecution(self, *args): return _ama.IAMDSpi_OnMDTickExecution(self, *args)
    def OnMDOrderQueue(self, *args): return _ama.IAMDSpi_OnMDOrderQueue(self, *args)
    def OnMDAfterHourFixedPriceSnapshot(self, *args): return _ama.IAMDSpi_OnMDAfterHourFixedPriceSnapshot(self, *args)
    def OnMDAfterHourFixedPriceTickExecution(self, *args): return _ama.IAMDSpi_OnMDAfterHourFixedPriceTickExecution(self, *args)
    def OnMDFutureSnapshot(self, *args): return _ama.IAMDSpi_OnMDFutureSnapshot(self, *args)
    def OnMDCSIIndexSnapshot(self, *args): return _ama.IAMDSpi_OnMDCSIIndexSnapshot(self, *args)
    def OnMDIndicatorOfTradingVolumeSnapshot(self, *args): return _ama.IAMDSpi_OnMDIndicatorOfTradingVolumeSnapshot(self, *args)
    def OnMDCnIndexSnapshot(self, *args): return _ama.IAMDSpi_OnMDCnIndexSnapshot(self, *args)
    def OnMDRefinancingTickOrder(self, *args): return _ama.IAMDSpi_OnMDRefinancingTickOrder(self, *args)
    def OnMDRefinancingTickExecution(self, *args): return _ama.IAMDSpi_OnMDRefinancingTickExecution(self, *args)
    def OnMDNegotiableTickOrder(self, *args): return _ama.IAMDSpi_OnMDNegotiableTickOrder(self, *args)
    def OnMDNegotiableTickExecution(self, *args): return _ama.IAMDSpi_OnMDNegotiableTickExecution(self, *args)
    def OnMDHKTRealtimeLimit(self, *args): return _ama.IAMDSpi_OnMDHKTRealtimeLimit(self, *args)
    def OnMDHKTProductStatus(self, *args): return _ama.IAMDSpi_OnMDHKTProductStatus(self, *args)
    def OnMDNEEQSnapshot(self, *args): return _ama.IAMDSpi_OnMDNEEQSnapshot(self, *args)
    def __init__(self): 
        if self.__class__ == IAMDSpi:
            _self = None
        else:
            _self = self
        this = _ama.new_IAMDSpi(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _ama.disown_IAMDSpi(self)
        return weakref_proxy(self)
IAMDSpi_swigregister = _ama.IAMDSpi_swigregister
IAMDSpi_swigregister(IAMDSpi)

# This file is compatible with both classic and new-style classes.


